import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'lib/utils/stay_duration_validator.dart';

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
class StayDurationEditorExample {
  /// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
  static void testStayDurationValidation() {
    debugPrint('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å');

    final today = DateTime.now();
    final startDate = DateTime(2025, 8, 3);
    final originalEndDate = DateTime(2025, 8, 5);

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    final existingBookings = [
      DateTimeRange(start: DateTime(2025, 8, 6), end: DateTime(2025, 8, 8)),
      DateTimeRange(start: DateTime(2025, 8, 10), end: DateTime(2025, 8, 12)),
    ];

    debugPrint('\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    debugPrint('   ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${DateFormat('dd/MM/yyyy').format(today)}');
    debugPrint(
      '   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${DateFormat('dd/MM/yyyy').format(startDate)}',
    );
    debugPrint(
      '   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏°: ${DateFormat('dd/MM/yyyy').format(originalEndDate)}',
    );
    debugPrint('   ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: ${existingBookings.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    _testValidationCase(
      '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å (‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)',
      startDate,
      DateTime(2025, 8, 7),
      existingBookings,
      today,
    );

    _testValidationCase(
      '‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å (‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)',
      startDate,
      DateTime(2025, 8, 4),
      existingBookings,
      today,
    );

    _testValidationCase(
      '‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ú‡∏¥‡∏î)',
      startDate,
      DateTime(2025, 8, 2),
      existingBookings,
      today,
    );

    _testValidationCase(
      '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏à‡∏ô‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á (‡∏ú‡∏¥‡∏î)',
      startDate,
      DateTime(2025, 8, 9),
      existingBookings,
      today,
    );
  }

  /// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  static void _testValidationCase(
    String caseName,
    DateTime startDate,
    DateTime newEndDate,
    List<DateTimeRange> existingBookings,
    DateTime today,
  ) {
    debugPrint('\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: $caseName');
    debugPrint(
      '   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà: ${DateFormat('dd/MM/yyyy').format(newEndDate)}',
    );

    final result = StayDurationValidator.validateUpdatedStayDate(
      startDate: startDate,
      newEndDate: newEndDate,
      existingBookings: existingBookings,
      today: today,
    );

    if (result.isValid) {
      debugPrint('   ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
    } else {
      debugPrint('   ‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
      debugPrint('   ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${result.errorMessage}');
      debugPrint('   ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${result.errorType}');
    }
  }

  /// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  static void testChangeSummary() {
    debugPrint('\nüìù ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á');

    final originalStartDate = DateTime(2025, 8, 3);
    final originalEndDate = DateTime(2025, 8, 5);
    final newStartDate = DateTime(2025, 8, 3);
    final newEndDate = DateTime(2025, 8, 7);

    final summary = StayDurationValidator.generateChangeSummary(
      originalStartDate: originalStartDate,
      originalEndDate: originalEndDate,
      newStartDate: newStartDate,
      newEndDate: newEndDate,
    );

    debugPrint(summary);
  }
}

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
class StayDurationEditorWidget extends StatefulWidget {
  final DateTime originalStartDate;
  final DateTime originalEndDate;
  final Function(DateTime newEndDate) onDateChanged;
  final List<DateTimeRange> existingBookings;

  const StayDurationEditorWidget({
    super.key,
    required this.originalStartDate,
    required this.originalEndDate,
    required this.onDateChanged,
    required this.existingBookings,
  });

  @override
  State<StayDurationEditorWidget> createState() =>
      _StayDurationEditorWidgetState();
}

class _StayDurationEditorWidgetState extends State<StayDurationEditorWidget> {
  DateTime? newEndDate;
  ValidationResult? validationResult;

  @override
  void initState() {
    super.initState();
    newEndDate = widget.originalEndDate;
  }

  @override
  Widget build(BuildContext context) {
    final today = DateTime.now();
    final dayDifference = newEndDate != null
        ? newEndDate!.difference(widget.originalEndDate).inDays
        : 0;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.blue.shade50,
            border: Border.all(color: Colors.blue.shade200),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 8),
              Text(
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${DateFormat('dd/MM/yyyy', 'th').format(widget.originalStartDate)}',
              ),
              Text(
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: ${DateFormat('dd/MM/yyyy', 'th').format(widget.originalEndDate)}',
              ),
              Text(
                '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô: ${StayDurationValidator.calculateDaysDifference(widget.originalStartDate, widget.originalEndDate) + 1} ‡∏ß‡∏±‡∏ô',
              ),
            ],
          ),
        ),

        const SizedBox(height: 16),

        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
        const Text(
          '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà:',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 8),
        InkWell(
          onTap: () => _showDatePicker(),
          child: Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Row(
              children: [
                const Icon(Icons.calendar_today),
                const SizedBox(width: 8),
                Text(
                  newEndDate != null
                      ? DateFormat('dd/MM/yyyy', 'th').format(newEndDate!)
                      : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
                ),
              ],
            ),
          ),
        ),

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        if (newEndDate != null && dayDifference != 0) ...[
          const SizedBox(height: 12),
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: dayDifference > 0
                  ? Colors.green.shade50
                  : Colors.orange.shade50,
              border: Border.all(
                color: dayDifference > 0
                    ? Colors.green.shade200
                    : Colors.orange.shade200,
              ),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Row(
              children: [
                Icon(
                  dayDifference > 0 ? Icons.trending_up : Icons.trending_down,
                  color: dayDifference > 0 ? Colors.green : Colors.orange,
                ),
                const SizedBox(width: 8),
                Text(
                  dayDifference > 0
                      ? '‡πÄ‡∏û‡∏¥‡πà‡∏° $dayDifference ‡∏ß‡∏±‡∏ô'
                      : '‡∏•‡∏î ${dayDifference.abs()} ‡∏ß‡∏±‡∏ô',
                  style: TextStyle(
                    color: dayDifference > 0
                        ? Colors.green[700]
                        : Colors.orange[700],
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
        ],

        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        if (validationResult != null) ...[
          const SizedBox(height: 12),
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: validationResult!.isValid
                  ? Colors.green.shade50
                  : Colors.red.shade50,
              border: Border.all(
                color: validationResult!.isValid
                    ? Colors.green.shade200
                    : Colors.red.shade200,
              ),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Row(
              children: [
                Icon(
                  validationResult!.isValid ? Icons.check_circle : Icons.error,
                  color: validationResult!.isValid ? Colors.green : Colors.red,
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    validationResult!.isValid
                        ? '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
                        : validationResult!.errorMessage!,
                    style: TextStyle(
                      color: validationResult!.isValid
                          ? Colors.green[700]
                          : Colors.red[700],
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],

        const SizedBox(height: 16),

        // ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        SizedBox(
          width: double.infinity,
          child: ElevatedButton(
            onPressed:
                newEndDate != null && (validationResult?.isValid ?? false)
                ? () => widget.onDateChanged(newEndDate!)
                : null,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(vertical: 12),
            ),
            child: const Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á'),
          ),
        ),
      ],
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á DatePicker
  Future<void> _showDatePicker() async {
    final today = DateTime.now();
    final firstDate = widget.originalStartDate;
    final lastDate = today.add(const Duration(days: 365));

    final picked = await showDatePicker(
      context: context,
      initialDate: newEndDate ?? widget.originalEndDate,
      firstDate: firstDate,
      lastDate: lastDate,
      locale: const Locale('th'),
    );

    if (picked != null) {
      setState(() {
        newEndDate = picked;
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      _validateNewDate(picked);
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
  void _validateNewDate(DateTime newEndDate) {
    final today = DateTime.now();

    final result = StayDurationValidator.validateUpdatedStayDate(
      startDate: widget.originalStartDate,
      newEndDate: newEndDate,
      existingBookings: widget.existingBookings,
      today: today,
    );

    setState(() {
      validationResult = result;
    });
  }
}

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Screen
class StayDurationEditorScreen extends StatefulWidget {
  const StayDurationEditorScreen({super.key});

  @override
  State<StayDurationEditorScreen> createState() =>
      _StayDurationEditorScreenState();
}

class _StayDurationEditorScreenState extends State<StayDurationEditorScreen> {
  DateTime _originalStartDate = DateTime(2025, 8, 3);
  DateTime _originalEndDate = DateTime(2025, 8, 5);
  DateTime? _newEndDate;

  final List<DateTimeRange> _existingBookings = [
    DateTimeRange(start: DateTime(2025, 8, 6), end: DateTime(2025, 8, 8)),
    DateTimeRange(start: DateTime(2025, 8, 10), end: DateTime(2025, 8, 12)),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text('‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å: ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'),
                    Text('‡∏´‡πâ‡∏≠‡∏á: ‡∏´‡πâ‡∏≠‡∏á 101'),
                    Text(
                      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${DateFormat('dd/MM/yyyy', 'th').format(_originalStartDate)}',
                    ),
                    Text(
                      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: ${DateFormat('dd/MM/yyyy', 'th').format(_originalEndDate)}',
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 24),

            // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            StayDurationEditorWidget(
              originalStartDate: _originalStartDate,
              originalEndDate: _originalEndDate,
              existingBookings: _existingBookings,
              onDateChanged: (newEndDate) {
                setState(() {
                  _newEndDate = newEndDate;
                });

                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                      '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${DateFormat('dd/MM/yyyy', 'th').format(newEndDate)}',
                    ),
                    backgroundColor: Colors.green,
                  ),
                );
              },
            ),

            const Spacer(),

            // ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: () =>
                    StayDurationEditorExample.testStayDurationValidation(),
                icon: const Icon(Icons.bug_report),
                label: const Text('‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.purple,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 12),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
