import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
class TodayOnlyBookingExample {
  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isToday(DateTime selectedDate) {
    final today = DateTime.now();
    final todayOnly = DateTime(today.year, today.month, today.day);
    final selectedDateOnly = DateTime(
      selectedDate.year,
      selectedDate.month,
      selectedDate.day,
    );

    debugPrint('üìÖ isToday check:');
    debugPrint('   selectedDate: $selectedDate');
    debugPrint('   today: $today');
    debugPrint('   selectedDateOnly: $selectedDateOnly');
    debugPrint('   todayOnly: $todayOnly');
    debugPrint('   isToday: ${selectedDateOnly.isAtSameMomentAs(todayOnly)}');

    return selectedDateOnly.isAtSameMomentAs(todayOnly);
  }

  /// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  static void showTodayOnlyBookingMessage(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.warning_amber, color: Colors.orange),
            SizedBox(width: 8),
            Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ'),
          ],
        ),
        content: const Text(
          '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
          style: TextStyle(fontSize: 16),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß'),
          ),
        ],
      ),
    );
  }

  /// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
  static void onBookRoomPressed(BuildContext context, DateTime selectedDate) {
    debugPrint('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á...');
    debugPrint(
      '   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${DateFormat('dd/MM/yyyy').format(selectedDate)}',
    );
    debugPrint('   ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${DateFormat('dd/MM/yyyy').format(DateTime.now())}');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!isToday(selectedDate)) {
      debugPrint('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
      showTodayOnlyBookingMessage(context);
      return;
    }

    debugPrint('‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ...
    _proceedWithBooking(context);
  }

  /// ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
  static void _proceedWithBooking(BuildContext context) {
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å'),
        content: const Text('‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å...'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'),
                  backgroundColor: Colors.green,
                ),
              );
            },
            child: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'),
          ),
        ],
      ),
    );
  }

  /// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô isToday
  static void testIsTodayFunction() {
    debugPrint('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô isToday');

    final today = DateTime.now();
    final tomorrow = today.add(const Duration(days: 1));
    final yesterday = today.subtract(const Duration(days: 1));

    debugPrint('\nüìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    debugPrint(
      '   ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${DateFormat('dd/MM/yyyy').format(today)} - isToday: ${isToday(today)}',
    );
    debugPrint(
      '   ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ: ${DateFormat('dd/MM/yyyy').format(tomorrow)} - isToday: ${isToday(tomorrow)}',
    );
    debugPrint(
      '   ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô: ${DateFormat('dd/MM/yyyy').format(yesterday)} - isToday: ${isToday(yesterday)}',
    );
  }
}

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
class DateStatusWidget extends StatelessWidget {
  final DateTime selectedDate;
  final VoidCallback? onDateChanged;

  const DateStatusWidget({
    super.key,
    required this.selectedDate,
    this.onDateChanged,
  });

  @override
  Widget build(BuildContext context) {
    final isTodaySelected = TodayOnlyBookingExample.isToday(selectedDate);

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: isTodaySelected ? Colors.green[50] : Colors.orange[50],
        border: Border.all(
          color: isTodaySelected ? Colors.green[200]! : Colors.orange[200]!,
        ),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                isTodaySelected ? Icons.calendar_today : Icons.calendar_month,
                color: isTodaySelected ? Colors.green : Colors.orange,
              ),
              const SizedBox(width: 8),
              Text(
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${DateFormat('dd/MM/yyyy', 'th').format(selectedDate)}',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: isTodaySelected
                      ? Colors.green[700]
                      : Colors.orange[700],
                ),
              ),
              if (isTodaySelected) ...[
                const SizedBox(width: 8),
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 8,
                    vertical: 2,
                  ),
                  decoration: BoxDecoration(
                    color: Colors.green,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: const Text(
                    '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ],
          ),
          const SizedBox(height: 8),
          Text(
            isTodaySelected
                ? '‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÑ‡∏î‡πâ'
                : '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÑ‡∏î‡πâ (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)',
            style: TextStyle(
              color: isTodaySelected ? Colors.green[700] : Colors.orange[700],
              fontWeight: FontWeight.bold,
            ),
          ),
          if (onDateChanged != null) ...[
            const SizedBox(height: 8),
            ElevatedButton.icon(
              onPressed: onDateChanged,
              icon: const Icon(Icons.edit_calendar),
              label: const Text('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'),
              style: ElevatedButton.styleFrom(
                backgroundColor: isTodaySelected ? Colors.green : Colors.orange,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ],
      ),
    );
  }
}

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Screen
class TodayOnlyBookingScreen extends StatefulWidget {
  const TodayOnlyBookingScreen({super.key});

  @override
  State<TodayOnlyBookingScreen> createState() => _TodayOnlyBookingScreenState();
}

class _TodayOnlyBookingScreenState extends State<TodayOnlyBookingScreen> {
  DateTime _selectedDate = DateTime.now();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            DateStatusWidget(
              selectedDate: _selectedDate,
              onDateChanged: () async {
                final picked = await showDatePicker(
                  context: context,
                  initialDate: _selectedDate,
                  firstDate: DateTime.now(),
                  lastDate: DateTime.now().add(const Duration(days: 365)),
                  locale: const Locale('th'),
                );
                if (picked != null) {
                  setState(() => _selectedDate = picked);
                }
              },
            ),

            const SizedBox(height: 24),

            // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
            const Text(
              '‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),

            // ‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            _buildRoomCard('‡∏´‡πâ‡∏≠‡∏á 101', '‡∏ß‡πà‡∏≤‡∏á', Colors.green, true),
            const SizedBox(height: 8),

            // ‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
            _buildRoomCard('‡∏´‡πâ‡∏≠‡∏á 102', '‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á', Colors.red, false),
            const SizedBox(height: 8),

            // ‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            _buildRoomCard('‡∏´‡πâ‡∏≠‡∏á 103', '‡∏ß‡πà‡∏≤‡∏á', Colors.green, true),

            const Spacer(),

            // ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: () => TodayOnlyBookingExample.testIsTodayFunction(),
                icon: const Icon(Icons.bug_report),
                label: const Text('‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô isToday'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.purple,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 12),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildRoomCard(
    String roomName,
    String status,
    Color color,
    bool isAvailable,
  ) {
    final canBook =
        isAvailable && TodayOnlyBookingExample.isToday(_selectedDate);

    return Card(
      child: ListTile(
        leading: Container(
          width: 40,
          height: 40,
          decoration: BoxDecoration(color: color, shape: BoxShape.circle),
          child: Icon(Icons.hotel, color: Colors.white, size: 20),
        ),
        title: Text(roomName),
        subtitle: Text(
          '$status${canBook ? ' (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á)' : ' (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ)'}',
          style: TextStyle(
            color: canBook ? Colors.green[700] : Colors.grey[600],
            fontWeight: canBook ? FontWeight.bold : FontWeight.normal,
          ),
        ),
        trailing: canBook
            ? const Icon(Icons.arrow_forward_ios, color: Colors.green)
            : const Icon(Icons.block, color: Colors.grey),
        onTap: canBook
            ? () => TodayOnlyBookingExample.onBookRoomPressed(
                context,
                _selectedDate,
              )
            : null,
      ),
    );
  }
}
