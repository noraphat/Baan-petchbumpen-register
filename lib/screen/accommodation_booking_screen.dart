import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../widgets/interactive_map_improved.dart';
import '../services/map_service.dart';
import '../services/db_helper.dart';
import '../models/room_model.dart';
import '../models/reg_data.dart';
import 'test_map_display.dart';

class AccommodationBookingScreen extends StatefulWidget {
  const AccommodationBookingScreen({super.key});

  @override
  State<AccommodationBookingScreen> createState() =>
      _AccommodationBookingScreenState();
}

class _AccommodationBookingScreenState
    extends State<AccommodationBookingScreen> {
  final MapService _mapService = MapService();
  final DbHelper _dbHelper = DbHelper();

  MapData? _selectedMap;
  List<Room> _rooms = [];
  DateTime _selectedDate = DateTime.now();
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadMapAndRooms();
  }

  Future<void> _loadMapAndRooms() async {
    setState(() => _isLoading = true);

    try {
      // ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å (active)
      final maps = await _mapService.getAllMaps();
      debugPrint('üìç ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ${maps.length} ‡πÅ‡∏ú‡∏ô');

      _selectedMap = maps.where((map) => map.isActive).isNotEmpty
          ? maps.firstWhere((map) => map.isActive)
          : (maps.isNotEmpty ? maps.first : null);

      if (_selectedMap != null) {
        debugPrint('‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: ${_selectedMap!.name}');
        debugPrint('üñºÔ∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${_selectedMap!.hasImage}');
        if (_selectedMap!.hasImage) {
          debugPrint('üìÅ path ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${_selectedMap!.imagePath}');
        }

        // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        _rooms = await _mapService.getAllRooms();
        debugPrint('üè† ‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÑ‡∏î‡πâ ${_rooms.length} ‡∏´‡πâ‡∏≠‡∏á');

        for (var room in _rooms) {
          debugPrint(
            '   - ‡∏´‡πâ‡∏≠‡∏á ${room.name}: (${room.positionX}, ${room.positionY})',
          );
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        await _updateRoomStatusForDate(_selectedDate);
      } else {
        debugPrint('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      }
    } catch (e) {
      debugPrint('‚ùå Error loading map and rooms: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _updateRoomStatusForDate(DateTime date) async {
    try {
      final dateStr = DateFormat('yyyy-MM-dd').format(date);

      for (int i = 0; i < _rooms.length; i++) {
        final room = _rooms[i];

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        final bookings = await _getBookingsForRoomAndDate(room.id!, dateStr);

        if (bookings.isNotEmpty) {
          // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡∏™‡∏µ‡πÅ‡∏î‡∏á
          _rooms[i] = room.copyWith(status: RoomStatus.occupied);
        } else {
          // ‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
          _rooms[i] = room.copyWith(status: RoomStatus.available);
        }
      }

      setState(() {});
    } catch (e) {
      debugPrint('Error updating room status: $e');
    }
  }

  Future<List<Map<String, dynamic>>> _getBookingsForRoomAndDate(
    int roomId,
    String date,
  ) async {
    final db = await _dbHelper.db;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    return await db.query(
      'room_bookings',
      where:
          'room_id = ? AND check_in_date <= ? AND check_out_date >= ? AND status != ?',
      whereArgs: [roomId, date, date, 'cancelled'],
    );
  }

  Future<void> _onRoomTapped(Room room) async {
    if (room.status != RoomStatus.available) {
      _showRoomUnavailableDialog(room);
      return;
    }

    await _showBookingDialog(room);
  }

  void _showRoomUnavailableDialog(Room room) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('‡∏´‡πâ‡∏≠‡∏á ${room.name}'),
        content: Text(
          room.status == RoomStatus.occupied
              ? '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'
              : '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
          ),
        ],
      ),
    );
  }

  Future<void> _showBookingDialog(Room room) async {
    final idController = TextEditingController();

    return showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${room.name}'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${DateFormat('dd/MM/yyyy', 'th').format(_selectedDate)}',
            ),
            const SizedBox(height: 16),
            TextField(
              controller: idController,
              decoration: const InputDecoration(
                labelText: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
                hintText: '‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
              maxLength: 13,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          ElevatedButton(
            onPressed: () async {
              final idNumber = idController.text.trim();
              if (idNumber.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô')),
                );
                return;
              }

              if (idNumber.length != 13) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 13 ‡∏´‡∏•‡∏±‡∏Å'),
                  ),
                );
                return;
              }

              Navigator.pop(context);
              await _processBooking(room, idNumber);
            },
            child: const Text('‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á'),
          ),
        ],
      ),
    );
  }

  Future<void> _processBooking(Room room, String idNumber) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final practitioner = await _getPractitionerById(idNumber);
      if (practitioner == null) {
        _showErrorDialog('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ');
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final isCurrentlyStaying = await _isCurrentlyStaying(
        idNumber,
        _selectedDate,
      );
      if (!isCurrentlyStaying) {
        _showErrorDialog(
          '‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô',
        );
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      final existingBooking = await _getExistingBookingForDate(
        idNumber,
        _selectedDate,
      );
      if (existingBooking != null) {
        _showErrorDialog(
          '‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß\n‡∏´‡πâ‡∏≠‡∏á: ${existingBooking['room_name']}',
        );
        return;
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      await _saveBooking(room, idNumber, practitioner);

      // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á
      await _updateRoomStatusForDate(_selectedDate);

      _showSuccessDialog(room, practitioner);
    } catch (e) {
      debugPrint('Error processing booking: $e');
      _showErrorDialog('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  }

  Future<RegData?> _getPractitionerById(String idNumber) async {
    final db = await _dbHelper.db;
    final result = await db.query(
      'regs',
      where: 'id = ? AND status = ?',
      whereArgs: [idNumber, 'A'],
    );

    return result.isNotEmpty ? RegData.fromMap(result.first) : null;
  }

  Future<bool> _isCurrentlyStaying(String idNumber, DateTime checkDate) async {
    final db = await _dbHelper.db;
    final dateStr = DateFormat('yyyy-MM-dd').format(checkDate);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å reg_additional_info ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    final result = await db.query(
      'reg_additional_info',
      where: 'regId = ? AND startDate <= ? AND endDate >= ?',
      whereArgs: [idNumber, dateStr, dateStr],
    );

    return result.isNotEmpty;
  }

  Future<Map<String, dynamic>?> _getExistingBookingForDate(
    String idNumber,
    DateTime checkDate,
  ) async {
    final db = await _dbHelper.db;
    final dateStr = DateFormat('yyyy-MM-dd').format(checkDate);

    final result = await db.rawQuery(
      '''
      SELECT rb.*, r.name as room_name 
      FROM room_bookings rb
      INNER JOIN rooms r ON rb.room_id = r.id
      WHERE rb.visitor_id = ? 
        AND rb.check_in_date <= ? 
        AND rb.check_out_date >= ?
        AND rb.status != ?
    ''',
      [idNumber, dateStr, dateStr, 'cancelled'],
    );

    return result.isNotEmpty ? result.first : null;
  }

  Future<void> _saveBooking(
    Room room,
    String idNumber,
    RegData practitioner,
  ) async {
    final db = await _dbHelper.db;
    final now = DateTime.now();
    final dateStr = DateFormat('yyyy-MM-dd').format(_selectedDate);

    await db.insert('room_bookings', {
      'room_id': room.id,
      'visitor_id': idNumber,
      'check_in_date': dateStr,
      'check_out_date': dateStr, // ‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
      'status': 'confirmed',
      'note': '‡∏à‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
      'created_at': now.toIso8601String(),
      'updated_at': now.toIso8601String(),
    });
  }

  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ'),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
          ),
        ],
      ),
    );
  }

  void _showSuccessDialog(Room room, RegData practitioner) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('‡∏´‡πâ‡∏≠‡∏á: ${room.name}'),
            Text('‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${practitioner.first} ${practitioner.last}'),
            Text(
              '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${DateFormat('dd/MM/yyyy', 'th').format(_selectedDate)}',
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    debugPrint(
      'üîÑ Building accommodation screen - isLoading: $_isLoading, selectedMap: ${_selectedMap?.name}, rooms: ${_rooms.length}',
    );
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        actions: [
          IconButton(
            icon: const Icon(Icons.bug_report),
            onPressed: () => Navigator.push(
              context,
              MaterialPageRoute(builder: (_) => const TestMapDisplayScreen()),
            ),
            tooltip: '‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
          ),
          IconButton(
            icon: const Icon(Icons.info_outline),
            onPressed: () => _showHelpDialog(),
            tooltip: '‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _selectedMap == null
          ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.map_outlined, size: 64, color: Colors.grey),
                  const SizedBox(height: 16),
                  const Text(
                    '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏î‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\n‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å',
                    textAlign: TextAlign.center,
                    style: TextStyle(color: Colors.grey),
                  ),
                  const SizedBox(height: 24),
                  ElevatedButton.icon(
                    onPressed: _createTestMapAndRooms,
                    icon: const Icon(Icons.add_business),
                    label: const Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.purple,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 24,
                        vertical: 12,
                      ),
                    ),
                  ),
                  const SizedBox(height: 12),
                  TextButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text('‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å"'),
                  ),
                ],
              ),
            )
          : Column(
              children: [
                // Date Picker
                Container(
                  padding: const EdgeInsets.all(16),
                  color: Colors.grey[100],
                  child: Row(
                    children: [
                      const Icon(Icons.calendar_today, color: Colors.purple),
                      const SizedBox(width: 8),
                      const Text(
                        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ',
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                      Text(
                        DateFormat('dd/MM/yyyy', 'th').format(_selectedDate),
                      ),
                      const Spacer(),
                      ElevatedButton.icon(
                        onPressed: () async {
                          final picked = await showDatePicker(
                            context: context,
                            initialDate: _selectedDate,
                            firstDate: DateTime.now(),
                            lastDate: DateTime.now().add(
                              const Duration(days: 365),
                            ),
                            locale: const Locale('th'),
                          );
                          if (picked != null && picked != _selectedDate) {
                            setState(() => _selectedDate = picked);
                            await _updateRoomStatusForDate(picked);
                          }
                        },
                        icon: const Icon(Icons.edit_calendar),
                        label: const Text('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô'),
                      ),
                    ],
                  ),
                ),

                // Instructions and Legend
                Container(
                  padding: const EdgeInsets.all(16),
                  color: Colors.blue[50],
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Icon(Icons.info, color: Colors.blue, size: 20),
                          const SizedBox(width: 8),
                          const Text(
                            '‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: Colors.blue,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Wrap(
                        spacing: 16,
                        runSpacing: 8,
                        children: [
                          _buildLegendItem(Colors.green, '‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ)'),
                          _buildLegendItem(Colors.red, '‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å'),
                          _buildLegendItem(Colors.orange, '‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß'),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${_rooms.length} ‡∏´‡πâ‡∏≠‡∏á | '
                        '‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á: ${_rooms.where((r) => r.status == RoomStatus.available).length} ‡∏´‡πâ‡∏≠‡∏á',
                        style: const TextStyle(
                          fontSize: 12,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ),

                // Map
                Expanded(
                  child: Column(
                    children: [
                      // Debug info (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ debug mode)
                      Container(
                        padding: const EdgeInsets.all(8),
                        color: Colors.yellow[100],
                        child: Text(
                          'Debug: ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà="${_selectedMap?.name}", ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û=${_selectedMap?.hasImage}, ‡∏´‡πâ‡∏≠‡∏á=${_rooms.length}‡∏´‡πâ‡∏≠‡∏á',
                          style: const TextStyle(fontSize: 10),
                        ),
                      ),
                      // ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á
                      Expanded(
                        child: MapViewer(
                          mapData: _selectedMap!,
                          rooms: _rooms,
                          onRoomTap: _onRoomTapped,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
    );
  }

  Future<void> _createTestMapAndRooms() async {
    try {
      // ‡πÅ‡∏™‡∏î‡∏á loading dialog
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(
          child: Card(
            child: Padding(
              padding: EdgeInsets.all(20),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 16),
                  Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö...'),
                ],
              ),
            ),
          ),
        ),
      );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
      await _mapService.createTestData();

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏° (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ)
      await _dbHelper.createTestData();

      // ‡∏õ‡∏¥‡∏î loading dialog
      if (mounted) Navigator.pop(context);

      // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await _loadMapAndRooms();

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      // ‡∏õ‡∏¥‡∏î loading dialog ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
      if (mounted) Navigator.pop(context);

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }

      debugPrint('Error creating test data: $e');
    }
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.help_outline, color: Colors.blue),
            SizedBox(width: 8),
            Text('‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'),
          ],
        ),
        content: const SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                '‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å:',
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
              SizedBox(height: 8),
              Text('1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'),
              Text('2. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)'),
              Text('3. ‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å'),
              Text('4. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'),
              SizedBox(height: 16),
              Text(
                '‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:',
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
              SizedBox(height: 8),
              Text('‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß'),
              Text('‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î'),
              Text('‚Ä¢ ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô'),
              Text('‚Ä¢ ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏Ñ‡∏∑‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß'),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß'),
          ),
        ],
      ),
    );
  }

  Widget _buildLegendItem(Color color, String label) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: 16,
          height: 16,
          decoration: BoxDecoration(
            color: color,
            shape: BoxShape.circle,
            border: Border.all(color: Colors.black26),
          ),
        ),
        const SizedBox(width: 4),
        Text(label, style: const TextStyle(fontSize: 12)),
      ],
    );
  }
}
