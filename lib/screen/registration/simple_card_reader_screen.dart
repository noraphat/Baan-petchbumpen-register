import 'package:flutter/material.dart';
import 'dart:async';
import 'package:thai_idcard_reader_flutter/thai_idcard_reader_flutter.dart';
import '../../services/card_reader_service.dart';
import '../../widgets/card_reader_widgets.dart';
import '../../widgets/unified_registration_dialog.dart';
import '../../models/reg_data.dart';

/// ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (Simple)
/// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ lifecycle ‡πÅ‡∏•‡∏∞ permission ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
class SimpleCardReaderScreen extends StatefulWidget {
  const SimpleCardReaderScreen({super.key});

  @override
  State<SimpleCardReaderScreen> createState() => _SimpleCardReaderScreenState();
}

class _SimpleCardReaderScreenState extends State<SimpleCardReaderScreen>
    with WidgetsBindingObserver {
  final CardReaderService _cardReaderService = CardReaderService();

  UsbDevice? _device;
  ThaiIDCard? _cardData;
  String? _error;
  bool _isReading = false;
  bool _isProcessing = false;
  RegData? _currentRegistration;

  // Stream subscriptions
  StreamSubscription? _deviceSubscription;
  StreamSubscription? _cardSubscription;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _initializeCardReader();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _deviceSubscription?.cancel();
    _cardSubscription?.cancel();
    _cardReaderService.dispose();
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);

    switch (state) {
      case AppLifecycleState.resumed:
        debugPrint(
          'üîÑ SimpleCardReaderScreen: App resumed - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà',
        );
        _checkConnectionOnResume();
        break;
      case AppLifecycleState.paused:
        debugPrint('‚è∏Ô∏è SimpleCardReaderScreen: App paused');
        break;
      case AppLifecycleState.inactive:
      case AppLifecycleState.detached:
      case AppLifecycleState.hidden:
        break;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ app resume
  Future<void> _checkConnectionOnResume() async {
    try {
      debugPrint(
        'üîç SimpleCardReaderScreen: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ resume...',
      );

      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
      await Future.delayed(const Duration(milliseconds: 500));

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
      final isConnected = await _cardReaderService.ensureConnection();

      if (isConnected) {
        debugPrint('‚úÖ SimpleCardReaderScreen: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        setState(() {
          _error = null;
        });
      } else {
        debugPrint('‚ùå SimpleCardReaderScreen: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ');
        setState(() {
          _error = '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£';
        });
      }
    } catch (e) {
      debugPrint('‚ùå SimpleCardReaderScreen: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - $e');
    }
  }

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£
  Future<void> _initializeCardReader() async {
    try {
      debugPrint('üîß SimpleCardReaderScreen: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£...');

      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô CardReaderService
      await _cardReaderService.initialize();

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ stream listeners
      _setupStreamListeners();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö device ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      await _checkExistingConnection();

      debugPrint('‚úÖ SimpleCardReaderScreen: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (e) {
      debugPrint('‚ùå SimpleCardReaderScreen: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - $e');
      setState(() {
        _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ: $e';
      });
    }
  }

  /// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ stream listeners
  void _setupStreamListeners() {
    // Device events
    _deviceSubscription = ThaiIdcardReaderFlutter.deviceHandlerStream.listen(
      _onDeviceEvent,
      onError: _onDeviceError,
    );

    // Card events
    _cardSubscription = ThaiIdcardReaderFlutter.cardHandlerStream.listen(
      _onCardEvent,
      onError: _onCardError,
    );
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  Future<void> _checkExistingConnection() async {
    try {
      debugPrint('üîç SimpleCardReaderScreen: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...');

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ stream listeners ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
      await Future.delayed(const Duration(milliseconds: 800));

      // ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
      try {
        await ThaiIdcardReaderFlutter.read();
        debugPrint('‚úÖ SimpleCardReaderScreen: ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
      } catch (e) {
        debugPrint('‚ö†Ô∏è SimpleCardReaderScreen: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (‡∏õ‡∏Å‡∏ï‡∏¥) - $e');
        // ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ device ‡∏´‡∏£‡∏∑‡∏≠ card
      }
    } catch (e) {
      debugPrint('‚ùå SimpleCardReaderScreen: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - $e');
    }
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ device events
  void _onDeviceEvent(UsbDevice device) {
    debugPrint(
      'üì± SimpleCardReaderScreen: Device event - ${device.productName} (hasPermission: ${device.hasPermission}, isAttached: ${device.isAttached})',
    );

    setState(() {
      _device = device;
      _error = null;
    });

    if (device.hasPermission && device.isAttached) {
      debugPrint('‚úÖ SimpleCardReaderScreen: Device ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏°‡∏µ Permission');
    } else if (device.isAttached && !device.hasPermission) {
      debugPrint(
        '‚ö†Ô∏è SimpleCardReaderScreen: Device ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ Permission',
      );
      setState(() {
        _error = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå';
      });
    } else {
      debugPrint('‚ùå SimpleCardReaderScreen: Device ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
      setState(() {
        _error = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏ö USB';
      });
    }
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ device errors
  void _onDeviceError(dynamic error) {
    debugPrint('‚ùå SimpleCardReaderScreen: Device error - $error');
    setState(() {
      _error = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: $error';
    });
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ card events
  void _onCardEvent(dynamic cardEvent) {
    debugPrint('üí≥ SimpleCardReaderScreen: Card event - ${cardEvent.isReady}');

    if (cardEvent.isReady && !_isReading) {
      _readCard();
    }
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ card errors
  void _onCardError(dynamic error) {
    debugPrint('‚ùå SimpleCardReaderScreen: Card error - $error');
    setState(() {
      _error = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£: $error';
    });
  }

  /// ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£
  Future<void> _readCard() async {
    if (_isReading) return;

    setState(() {
      _isReading = true;
      _error = null;
    });

    try {
      debugPrint('üìñ SimpleCardReaderScreen: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£...');

      final result = await ThaiIdcardReaderFlutter.read();

      setState(() {
        _cardData = result;
        _error = null;
      });

      debugPrint('‚úÖ SimpleCardReaderScreen: ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£
      await _processCardData(result);
    } catch (e) {
      debugPrint('‚ùå SimpleCardReaderScreen: ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - $e');
      setState(() {
        _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ: $e';
      });
    } finally {
      setState(() {
        _isReading = false;
      });
    }
  }

  /// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£
  Future<void> _processCardData(ThaiIDCard cardData) async {
    if (_isProcessing) return;

    setState(() {
      _isProcessing = true;
    });

    try {
      debugPrint('üîÑ SimpleCardReaderScreen: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£...');

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô RegData
      final regData = RegData.fromIdCard(
        id: cardData.cid ?? '',
        first: cardData.firstnameTH ?? '',
        last: cardData.lastnameTH ?? '',
        dob: cardData.birthdate ?? '',
        addr: cardData.address ?? '',
        gender: cardData.gender == 1 ? '‡∏ä‡∏≤‡∏¢' : '‡∏´‡∏ç‡∏¥‡∏á',
        phone: '',
      );

      setState(() {
        _currentRegistration = regData;
      });

      // ‡πÅ‡∏™‡∏î‡∏á dialog ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
      _showRegistrationDialog(regData);
    } catch (e) {
      debugPrint('‚ùå SimpleCardReaderScreen: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - $e');
      setState(() {
        _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: $e';
      });
    } finally {
      setState(() {
        _isProcessing = false;
      });
    }
  }

  /// ‡πÅ‡∏™‡∏î‡∏á dialog ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  void _showRegistrationDialog(RegData regData) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => UnifiedRegistrationDialog(
        regData: regData,
        isEditMode: false,
        onCompleted: (additionalInfo) {
          Navigator.pop(context);

          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white),
                  SizedBox(width: 8),
                  Text('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'),
                ],
              ),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 2),
            ),
          );

          // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          setState(() {
            _cardData = null;
            _currentRegistration = null;
          });
        },
      ),
    );
  }

  /// ‡∏Ç‡∏≠ Permission
  Future<void> _requestPermission() async {
    try {
      debugPrint('üîê SimpleCardReaderScreen: ‡∏Ç‡∏≠ Permission...');

      final success = await _cardReaderService.requestPermission();

      if (success) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß'),
            backgroundColor: Colors.green,
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  children: [
                    Icon(
                      _device?.hasPermission == true
                          ? Icons.usb
                          : Icons.usb_off,
                      color: _device?.hasPermission == true
                          ? Colors.green
                          : Colors.red,
                      size: 32,
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            _device?.hasPermission == true
                                ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß'
                                : '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: _device?.hasPermission == true
                                  ? Colors.green
                                  : Colors.red,
                            ),
                          ),
                          if (_device != null) ...[
                            Text(
                              '${_device!.manufacturerName} ${_device!.productName}',
                              style: const TextStyle(fontSize: 14),
                            ),
                            Text(
                              _device!.hasPermission
                                  ? '‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á'
                                  : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á',
                              style: TextStyle(
                                fontSize: 12,
                                color: _device!.hasPermission
                                    ? Colors.green
                                    : Colors.orange,
                              ),
                            ),
                          ],
                        ],
                      ),
                    ),
                    if (_device?.isAttached == true &&
                        _device?.hasPermission != true)
                      ElevatedButton.icon(
                        onPressed: _requestPermission,
                        icon: const Icon(Icons.security),
                        label: const Text('‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.orange,
                          foregroundColor: Colors.white,
                        ),
                      ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 16),

            // ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            if (_error != null) ...[
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.red.shade50,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.red.shade200),
                ),
                child: Row(
                  children: [
                    Icon(Icons.error_outline, color: Colors.red.shade600),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Text(
                        _error!,
                        style: TextStyle(color: Colors.red.shade700),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 16),
            ],

            // ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£
            if (_device?.hasPermission == true) ...[
              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  onPressed: (_isReading || _isProcessing) ? null : _readCard,
                  icon: (_isReading || _isProcessing)
                      ? const SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(
                              Colors.white,
                            ),
                          ),
                        )
                      : const Icon(Icons.credit_card),
                  label: Text(
                    (_isReading || _isProcessing)
                        ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£...'
                        : '‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 16),
            ],

            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£
            if (_cardData != null) ...[
              Card(
                color: Colors.green.shade50,
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Icon(Icons.verified_user, color: Colors.green),
                          const SizedBox(width: 8),
                          const Text(
                            '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const Spacer(),
                          Chip(
                            label: const Text(
                              '‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                              style: TextStyle(fontSize: 12),
                            ),
                            backgroundColor: Colors.green.shade100,
                          ),
                        ],
                      ),
                      const Divider(),
                      if (_cardData!.cid != null)
                        _buildInfoRow('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£', _cardData!.cid!),
                      if (_cardData!.firstnameTH != null)
                        _buildInfoRow(
                          '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
                          '${_cardData!.firstnameTH} ${_cardData!.lastnameTH ?? ''}',
                        ),
                      if (_cardData!.gender != null)
                        _buildInfoRow(
                          '‡πÄ‡∏û‡∏®',
                          _cardData!.gender == 1 ? '‡∏ä‡∏≤‡∏¢' : '‡∏´‡∏ç‡∏¥‡∏á',
                        ),
                      if (_cardData!.birthdate != null)
                        _buildInfoRow('‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î', _cardData!.birthdate!),
                      if (_cardData!.address != null)
                        _buildInfoRow('‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', _cardData!.address!),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
            ],

            // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.grey.shade200),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.info_outline, color: Colors.blue.shade600),
                      const SizedBox(width: 8),
                      const Text(
                        '‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),
                  const Text(
                    '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏ö‡∏≠‡∏¢‡∏π‡πà',
                  ),
                  const Text('‚Ä¢ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå"'),
                  const Text('‚Ä¢ ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏Å‡∏õ‡∏£‡∏Å'),
                  const Text('‚Ä¢ ‡∏≠‡∏¢‡πà‡∏≤‡∏ñ‡∏≠‡∏î‡∏ö‡∏±‡∏ï‡∏£‡∏≠‡∏≠‡∏Å‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label:',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          Expanded(
            child: SelectableText(value, style: const TextStyle(fontSize: 16)),
          ),
        ],
      ),
    );
  }
}
