import 'package:flutter/foundation.dart';
import 'package:intl/intl.dart';
import 'db_helper.dart';
import '../models/reg_data.dart';

/// Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
class BookingService {
  final DbHelper _dbHelper = DbHelper();

  /// Getter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á DbHelper
  DbHelper get dbHelper => _dbHelper;

  /// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö reg_additional_info)
  Future<bool> updateRoomBookingCheckOut({
    required int bookingId,
    required DateTime newCheckOutDate,
    required String visitorId,
  }) async {
    try {
      debugPrint('üîß ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å ID: $bookingId');
      debugPrint(
        '   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà: ${DateFormat('yyyy-MM-dd').format(newCheckOutDate)}',
      );

      final db = await _dbHelper.db;
      final newCheckOutStr = DateFormat('yyyy-MM-dd').format(newCheckOutDate);

      // 1. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ room_bookings table
      await db.update(
        'room_bookings',
        {'check_out_date': newCheckOutStr},
        where: 'id = ?',
        whereArgs: [bookingId],
      );

      debugPrint('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï room_bookings ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï stays ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      // (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà stays.end_date ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö room_bookings.check_out_date ‡πÄ‡∏î‡∏¥‡∏°)
      final bookingResult = await db.query(
        'room_bookings',
        where: 'id = ?',
        whereArgs: [bookingId],
      );

      if (bookingResult.isNotEmpty) {
        final originalCheckOut =
            bookingResult.first['check_out_date'] as String;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ stays ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        final staysResult = await db.query(
          'stays',
          where: 'visitor_id = ? AND end_date = ? AND status = ?',
          whereArgs: [visitorId, originalCheckOut, 'active'],
        );

        if (staysResult.isNotEmpty) {
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï stays ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà end_date ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö room_bookings ‡πÄ‡∏î‡∏¥‡∏°
          await db.update(
            'stays',
            {'end_date': newCheckOutStr},
            where: 'visitor_id = ? AND end_date = ? AND status = ?',
            whereArgs: [visitorId, originalCheckOut, 'active'],
          );
          debugPrint('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï stays ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö room_bookings ‡πÄ‡∏î‡∏¥‡∏°)');
        } else {
          debugPrint('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï stays (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö room_bookings ‡πÄ‡∏î‡∏¥‡∏°)');
        }
      }

      return true;
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å: $e');
      return false;
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ)
  Future<List<Map<String, dynamic>>> getExistingRoomBookings({
    required int roomId,
    required DateTime startDate,
    required DateTime endDate,
    int? excludeBookingId,
  }) async {
    try {
      final db = await _dbHelper.db;
      final startDateStr = DateFormat('yyyy-MM-dd').format(startDate);
      final endDateStr = DateFormat('yyyy-MM-dd').format(endDate);

      debugPrint('üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
      debugPrint('   ‡∏´‡πâ‡∏≠‡∏á: $roomId');
      debugPrint('   ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: $startDateStr - $endDateStr');
      if (excludeBookingId != null) {
        debugPrint('   ‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ID: $excludeBookingId ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ');
      }

      String query = '''
        SELECT id, check_in_date, check_out_date, visitor_id, room_id
        FROM room_bookings
        WHERE room_id = ? 
          AND status != 'cancelled'
          AND (
            (check_in_date <= ? AND check_out_date >= ?) OR
            (check_in_date <= ? AND check_out_date >= ?) OR
            (check_in_date >= ? AND check_out_date <= ?)
          )
      ''';

      List<dynamic> args = [
        roomId,
        startDateStr,
        startDateStr,
        endDateStr,
        endDateStr,
        startDateStr,
        endDateStr,
      ];

      if (excludeBookingId != null) {
        query += ' AND id != ?';
        args.add(excludeBookingId);
      }

      final result = await db.rawQuery(query, args);

      debugPrint('   ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ${result.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      for (final booking in result) {
        debugPrint(
          '   - ID ${booking['id']}: ${booking['check_in_date']} - ${booking['check_out_date']}',
        );
      }

      return result;
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: $e');
      return [];
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
  Future<bool> hasBookingConflict({
    required int roomId,
    required DateTime startDate,
    required DateTime endDate,
    int? excludeBookingId,
  }) async {
    final existingBookings = await getExistingRoomBookings(
      roomId: roomId,
      startDate: startDate,
      endDate: endDate,
      excludeBookingId: excludeBookingId,
    );

    return existingBookings.isNotEmpty;
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏° (reg_additional_info)
  Future<RegAdditionalInfo?> getPracticePeriod(String visitorId) async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å reg_additional_info ‡∏ï‡∏≤‡∏° visitId
      final db = await _dbHelper.db;

      // ‡∏´‡∏≤ visitId ‡∏à‡∏≤‡∏Å stays table
      final staysResult = await db.query(
        'stays',
        where: 'visitor_id = ? AND status = ?',
        whereArgs: [visitorId, 'active'],
        orderBy: 'created_at DESC',
        limit: 1,
      );

      if (staysResult.isNotEmpty) {
        final stay = staysResult.first;
        final visitId =
            '${visitorId}_${DateTime.parse(stay['created_at'] as String).millisecondsSinceEpoch}';

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å reg_additional_info
        final additionalInfoResult = await db.query(
          'reg_additional_info',
          where: 'visitId = ?',
          whereArgs: [visitId],
        );

        if (additionalInfoResult.isNotEmpty) {
          return RegAdditionalInfo.fromMap(additionalInfoResult.first);
        }
      }

      return null;
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°: $e');
      return null;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<bool> isBookingWithinPracticePeriod({
    required String visitorId,
    required DateTime bookingStartDate,
    required DateTime bookingEndDate,
  }) async {
    final practiceInfo = await getPracticePeriod(visitorId);

    if (practiceInfo == null ||
        practiceInfo.startDate == null ||
        practiceInfo.endDate == null) {
      debugPrint('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°');
      return false;
    }

    final practiceStart = DateTime(
      practiceInfo.startDate!.year,
      practiceInfo.startDate!.month,
      practiceInfo.startDate!.day,
    );
    final practiceEnd = DateTime(
      practiceInfo.endDate!.year,
      practiceInfo.endDate!.month,
      practiceInfo.endDate!.day,
    );
    final bookingStart = DateTime(
      bookingStartDate.year,
      bookingStartDate.month,
      bookingStartDate.day,
    );
    final bookingEnd = DateTime(
      bookingEndDate.year,
      bookingEndDate.month,
      bookingEndDate.day,
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°
    final isWithin =
        (bookingStart.isAtSameMomentAs(practiceStart) ||
            bookingStart.isAfter(practiceStart)) &&
        (bookingEnd.isAtSameMomentAs(practiceEnd) ||
            bookingEnd.isBefore(practiceEnd));

    debugPrint('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°:');
    debugPrint(
      '   ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°: ${DateFormat('yyyy-MM-dd').format(practiceStart)} - ${DateFormat('yyyy-MM-dd').format(practiceEnd)}',
    );
    debugPrint(
      '   ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á: ${DateFormat('yyyy-MM-dd').format(bookingStart)} - ${DateFormat('yyyy-MM-dd').format(bookingEnd)}',
    );
    debugPrint('   ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°: $isWithin');

    return isWithin;
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà
  Future<bool> createRoomBooking({
    required int roomId,
    required String visitorId,
    required DateTime checkInDate,
    required DateTime checkOutDate,
  }) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á
      final hasConflict = await hasBookingConflict(
        roomId: roomId,
        startDate: checkInDate,
        endDate: checkOutDate,
      );

      if (hasConflict) {
        debugPrint('‚ùå ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á');
        return false;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°
      final isWithin = await isBookingWithinPracticePeriod(
        visitorId: visitorId,
        bookingStartDate: checkInDate,
        bookingEndDate: checkOutDate,
      );

      if (!isWithin) {
        debugPrint('‚ùå ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°');
        return false;
      }

      final db = await _dbHelper.db;
      final checkInStr = DateFormat('yyyy-MM-dd').format(checkInDate);
      final checkOutStr = DateFormat('yyyy-MM-dd').format(checkOutDate);

      await db.insert('room_bookings', {
        'room_id': roomId,
        'visitor_id': visitorId,
        'check_in_date': checkInStr,
        'check_out_date': checkOutStr,
        'status': 'active',
        'created_at': DateTime.now().toIso8601String(),
      });

      debugPrint('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: $e');
      return false;
    }
  }
}
