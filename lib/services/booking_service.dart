import 'package:flutter/foundation.dart';
import 'package:intl/intl.dart';
import 'db_helper.dart';
import '../models/reg_data.dart';

/// ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
class BookingValidationResult {
  final bool isValid;
  final String? errorMessage;

  const BookingValidationResult({required this.isValid, this.errorMessage});

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  factory BookingValidationResult.success() {
    return const BookingValidationResult(isValid: true);
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  factory BookingValidationResult.error(String message) {
    return BookingValidationResult(isValid: false, errorMessage: message);
  }
}

/// Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
class BookingService {
  final DbHelper _dbHelper = DbHelper();

  /// Getter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á DbHelper
  DbHelper get dbHelper => _dbHelper;

  /// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö reg_additional_info)
  Future<bool> updateRoomBookingCheckOut({
    required int bookingId,
    required DateTime newCheckOutDate,
    required String visitorId,
  }) async {
    try {
      debugPrint('üîß ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å ID: $bookingId');
      debugPrint(
        '   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà: ${DateFormat('yyyy-MM-dd').format(newCheckOutDate)}',
      );

      final db = await _dbHelper.db;
      final newCheckOutStr = DateFormat('yyyy-MM-dd').format(newCheckOutDate);

      // 1. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ room_bookings table
      await db.update(
        'room_bookings',
        {'check_out_date': newCheckOutStr},
        where: 'id = ?',
        whereArgs: [bookingId],
      );

      debugPrint('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï room_bookings ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï stays ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      // (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà stays.end_date ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö room_bookings.check_out_date ‡πÄ‡∏î‡∏¥‡∏°)
      final bookingResult = await db.query(
        'room_bookings',
        where: 'id = ?',
        whereArgs: [bookingId],
      );

      if (bookingResult.isNotEmpty) {
        final originalCheckOut =
            bookingResult.first['check_out_date'] as String;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ stays ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        final staysResult = await db.query(
          'stays',
          where: 'visitor_id = ? AND end_date = ? AND status = ?',
          whereArgs: [visitorId, originalCheckOut, 'active'],
        );

        if (staysResult.isNotEmpty) {
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï stays ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà end_date ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö room_bookings ‡πÄ‡∏î‡∏¥‡∏°
          await db.update(
            'stays',
            {'end_date': newCheckOutStr},
            where: 'visitor_id = ? AND end_date = ? AND status = ?',
            whereArgs: [visitorId, originalCheckOut, 'active'],
          );
          debugPrint('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï stays ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö room_bookings ‡πÄ‡∏î‡∏¥‡∏°)');
        } else {
          debugPrint('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï stays (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö room_bookings ‡πÄ‡∏î‡∏¥‡∏°)');
        }
      }

      return true;
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å: $e');
      return false;
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ)
  Future<List<Map<String, dynamic>>> getExistingRoomBookings({
    required int roomId,
    required DateTime startDate,
    required DateTime endDate,
    int? excludeBookingId,
  }) async {
    try {
      final db = await _dbHelper.db;
      final startDateStr = DateFormat('yyyy-MM-dd').format(startDate);
      final endDateStr = DateFormat('yyyy-MM-dd').format(endDate);

      debugPrint('üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
      debugPrint('   ‡∏´‡πâ‡∏≠‡∏á: $roomId');
      debugPrint('   ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: $startDateStr - $endDateStr');
      if (excludeBookingId != null) {
        debugPrint('   ‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ID: $excludeBookingId ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ');
      }

      String query = '''
        SELECT id, check_in_date, check_out_date, visitor_id, room_id
        FROM room_bookings
        WHERE room_id = ? 
          AND status != 'cancelled'
          AND (
            (check_in_date <= ? AND check_out_date >= ?) OR
            (check_in_date <= ? AND check_out_date >= ?) OR
            (check_in_date >= ? AND check_out_date <= ?)
          )
      ''';

      List<dynamic> args = [
        roomId,
        startDateStr,
        startDateStr,
        endDateStr,
        endDateStr,
        startDateStr,
        endDateStr,
      ];

      if (excludeBookingId != null) {
        query += ' AND id != ?';
        args.add(excludeBookingId);
      }

      final result = await db.rawQuery(query, args);

      debugPrint('   ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ${result.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      for (final booking in result) {
        debugPrint(
          '   - ID ${booking['id']}: ${booking['check_in_date']} - ${booking['check_out_date']}',
        );
      }

      return result;
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: $e');
      return [];
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
  Future<bool> hasBookingConflict({
    required int roomId,
    required DateTime startDate,
    required DateTime endDate,
    int? excludeBookingId,
  }) async {
    final existingBookings = await getExistingRoomBookings(
      roomId: roomId,
      startDate: startDate,
      endDate: endDate,
      excludeBookingId: excludeBookingId,
    );

    return existingBookings.isNotEmpty;
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏° (reg_additional_info)
  Future<RegAdditionalInfo?> getPracticePeriod(String visitorId) async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å reg_additional_info ‡∏ï‡∏≤‡∏° visitId
      final db = await _dbHelper.db;

      // ‡∏´‡∏≤ visitId ‡∏à‡∏≤‡∏Å stays table
      final staysResult = await db.query(
        'stays',
        where: 'visitor_id = ? AND status = ?',
        whereArgs: [visitorId, 'active'],
        orderBy: 'created_at DESC',
        limit: 1,
      );

      if (staysResult.isNotEmpty) {
        final stay = staysResult.first;
        final visitId =
            '${visitorId}_${DateTime.parse(stay['created_at'] as String).millisecondsSinceEpoch}';

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å reg_additional_info
        final additionalInfoResult = await db.query(
          'reg_additional_info',
          where: 'visitId = ?',
          whereArgs: [visitId],
        );

        if (additionalInfoResult.isNotEmpty) {
          return RegAdditionalInfo.fromMap(additionalInfoResult.first);
        }
      }

      return null;
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°: $e');
      return null;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<bool> isBookingWithinPracticePeriod({
    required String visitorId,
    required DateTime bookingStartDate,
    required DateTime bookingEndDate,
  }) async {
    final practiceInfo = await getPracticePeriod(visitorId);

    if (practiceInfo == null ||
        practiceInfo.startDate == null ||
        practiceInfo.endDate == null) {
      debugPrint('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°');
      return false;
    }

    final practiceStart = DateTime(
      practiceInfo.startDate!.year,
      practiceInfo.startDate!.month,
      practiceInfo.startDate!.day,
    );
    final practiceEnd = DateTime(
      practiceInfo.endDate!.year,
      practiceInfo.endDate!.month,
      practiceInfo.endDate!.day,
    );
    final bookingStart = DateTime(
      bookingStartDate.year,
      bookingStartDate.month,
      bookingStartDate.day,
    );
    final bookingEnd = DateTime(
      bookingEndDate.year,
      bookingEndDate.month,
      bookingEndDate.day,
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°
    final isWithin =
        (bookingStart.isAtSameMomentAs(practiceStart) ||
            bookingStart.isAfter(practiceStart)) &&
        (bookingEnd.isAtSameMomentAs(practiceEnd) ||
            bookingEnd.isBefore(practiceEnd));

    debugPrint('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°:');
    debugPrint(
      '   ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°: ${DateFormat('yyyy-MM-dd').format(practiceStart)} - ${DateFormat('yyyy-MM-dd').format(practiceEnd)}',
    );
    debugPrint(
      '   ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á: ${DateFormat('yyyy-MM-dd').format(bookingStart)} - ${DateFormat('yyyy-MM-dd').format(bookingEnd)}',
    );
    debugPrint('   ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°: $isWithin');

    return isWithin;
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà
  Future<bool> createRoomBooking({
    required int roomId,
    required String visitorId,
    required DateTime checkInDate,
    required DateTime checkOutDate,
  }) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á
      final hasConflict = await hasBookingConflict(
        roomId: roomId,
        startDate: checkInDate,
        endDate: checkOutDate,
      );

      if (hasConflict) {
        debugPrint('‚ùå ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á');
        return false;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°
      final isWithin = await isBookingWithinPracticePeriod(
        visitorId: visitorId,
        bookingStartDate: checkInDate,
        bookingEndDate: checkOutDate,
      );

      if (!isWithin) {
        debugPrint('‚ùå ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°');
        return false;
      }

      final db = await _dbHelper.db;
      final checkInStr = DateFormat('yyyy-MM-dd').format(checkInDate);
      final checkOutStr = DateFormat('yyyy-MM-dd').format(checkOutDate);

      await db.insert('room_bookings', {
        'room_id': roomId,
        'visitor_id': visitorId,
        'check_in_date': checkInStr,
        'check_out_date': checkOutStr,
        'status': 'active',
        'created_at': DateTime.now().toIso8601String(),
      });

      debugPrint('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: $e');
      return false;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  /// ‡∏´‡πâ‡∏≤‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏´‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ß‡∏±‡∏ô
  Future<BookingValidationResult> canCancelBooking({
    required int bookingId,
    required String visitorId,
  }) async {
    try {
      final db = await _dbHelper.db;

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      final bookingResult = await db.query(
        'room_bookings',
        where: 'id = ?',
        whereArgs: [bookingId],
      );

      if (bookingResult.isEmpty) {
        return BookingValidationResult.error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á');
      }

      final booking = bookingResult.first;
      final checkInDate = DateTime.parse(booking['check_in_date'] as String);
      final checkOutDate = DateTime.parse(booking['check_out_date'] as String);
      final today = DateTime.now();
      final todayOnly = DateTime(today.year, today.month, today.day);

      debugPrint('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:');
      debugPrint(
        '   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤: ${DateFormat('yyyy-MM-dd').format(checkInDate)}',
      );
      debugPrint(
        '   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å: ${DateFormat('yyyy-MM-dd').format(checkOutDate)}',
      );
      debugPrint(
        '   ‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${DateFormat('yyyy-MM-dd').format(todayOnly)}',
      );

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (checkInDate.isBefore(todayOnly)) {
        debugPrint('‚ùå ‡∏´‡πâ‡∏≤‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
        return BookingValidationResult.error(
          '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß\n'
          '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å" ‡πÅ‡∏ó‡∏ô',
        );
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (checkInDate.isAtSameMomentAs(todayOnly)) {
        debugPrint('‚ùå ‡∏´‡πâ‡∏≤‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß');
        return BookingValidationResult.error(
          '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß\n'
          '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å" ‡πÅ‡∏ó‡∏ô',
        );
      }

      debugPrint('‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ');
      return BookingValidationResult.success();
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: $e');
      return BookingValidationResult.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  /// ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢
  Future<BookingValidationResult> canTransferRoom({
    required int currentBookingId,
    required int targetRoomId,
    required String visitorId,
  }) async {
    try {
      final db = await _dbHelper.db;

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      final bookingResult = await db.query(
        'room_bookings',
        where: 'id = ?',
        whereArgs: [currentBookingId],
      );

      if (bookingResult.isEmpty) {
        return BookingValidationResult.error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á');
      }

      final booking = bookingResult.first;
      final checkInDate = DateTime.parse(booking['check_in_date'] as String);
      final checkOutDate = DateTime.parse(booking['check_out_date'] as String);

      debugPrint('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á:');
      debugPrint('   ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: $targetRoomId');
      debugPrint(
        '   ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${DateFormat('yyyy-MM-dd').format(checkInDate)} - ${DateFormat('yyyy-MM-dd').format(checkOutDate)}',
      );

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
      final conflicts = await getExistingRoomBookings(
        roomId: targetRoomId,
        startDate: checkInDate,
        endDate: checkOutDate,
        excludeBookingId: currentBookingId,
      );

      if (conflicts.isNotEmpty) {
        debugPrint('‚ùå ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á');
        final conflictDates = conflicts
            .map((c) {
              final start = DateTime.parse(c['check_in_date'] as String);
              final end = DateTime.parse(c['check_out_date'] as String);
              return '${DateFormat('dd/MM/yyyy').format(start)} - ${DateFormat('dd/MM/yyyy').format(end)}';
            })
            .join(', ');

        return BookingValidationResult.error(
          '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:\n$conflictDates',
        );
      }

      debugPrint('‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
      return BookingValidationResult.success();
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á: $e');
      return BookingValidationResult.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
    }
  }

  /// ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
  Future<bool> cancelBooking({
    required int bookingId,
    required String visitorId,
  }) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final validation = await canCancelBooking(
        bookingId: bookingId,
        visitorId: visitorId,
      );

      if (!validation.isValid) {
        debugPrint('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ: ${validation.errorMessage}');
        return false;
      }

      final db = await _dbHelper.db;

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô cancelled
      await db.update(
        'room_bookings',
        {'status': 'cancelled'},
        where: 'id = ?',
        whereArgs: [bookingId],
      );

      debugPrint('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: $e');
      return false;
    }
  }

  /// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
  Future<bool> transferRoom({
    required int currentBookingId,
    required int targetRoomId,
    required String visitorId,
  }) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final validation = await canTransferRoom(
        currentBookingId: currentBookingId,
        targetRoomId: targetRoomId,
        visitorId: visitorId,
      );

      if (!validation.isValid) {
        debugPrint('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ${validation.errorMessage}');
        return false;
      }

      final db = await _dbHelper.db;

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
      await db.update(
        'room_bookings',
        {'room_id': targetRoomId},
        where: 'id = ?',
        whereArgs: [currentBookingId],
      );

      debugPrint('‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á: $e');
      return false;
    }
  }
}
