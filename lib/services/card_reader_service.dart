import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:thai_idcard_reader_flutter/thai_idcard_reader_flutter.dart';

/// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£
enum CardReaderConnectionStatus {
  disconnected,   // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  connecting,     // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  connected,      // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß
  error,          // ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
}

/// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£
enum CardReadingStatus {
  idle,           // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
  reading,        // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô
  success,        // ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  failed,         // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  noCard,         // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£
  cardDamaged,    // ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
}

/// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏ó‡∏¢
class ThaiIdCardData {
  final String cid;
  final String? titleTH;
  final String? firstnameTH;
  final String? lastnameTH;
  final String? titleEN;
  final String? firstnameEN;
  final String? lastnameEN;
  final String? birthdate;
  final int? gender; // 1 = ‡∏ä‡∏≤‡∏¢, 2 = ‡∏´‡∏ç‡∏¥‡∏á
  final String? address;
  final String? issueDate;
  final String? expireDate;
  final List<int>? photo;
  final DateTime readTimestamp;

  ThaiIdCardData({
    required this.cid,
    this.titleTH,
    this.firstnameTH,
    this.lastnameTH,
    this.titleEN,
    this.firstnameEN,
    this.lastnameEN,
    this.birthdate,
    this.gender,
    this.address,
    this.issueDate,
    this.expireDate,
    this.photo,
    DateTime? readTimestamp,
  }) : readTimestamp = readTimestamp ?? DateTime.now();

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á ThaiIdCardData ‡∏à‡∏≤‡∏Å ThaiIDCard
  factory ThaiIdCardData.fromThaiIDCard(ThaiIDCard card) {
    return ThaiIdCardData(
      cid: card.cid ?? '',
      titleTH: card.titleTH,
      firstnameTH: card.firstnameTH,
      lastnameTH: card.lastnameTH,
      titleEN: card.titleEN,
      firstnameEN: card.firstnameEN,
      lastnameEN: card.lastnameEN,
      birthdate: card.birthdate,
      gender: card.gender,
      address: card.address,
      issueDate: card.issueDate,
      expireDate: card.expireDate,
      photo: card.photo,
      readTimestamp: DateTime.now(),
    );
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  bool get isValid {
    return cid.isNotEmpty && 
           cid.length == 13 && 
           firstnameTH?.isNotEmpty == true &&
           lastnameTH?.isNotEmpty == true;
  }

  /// ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  String get fullNameTH {
    final parts = [titleTH, firstnameTH, lastnameTH]
        .where((part) => part?.isNotEmpty == true);
    return parts.join(' ');
  }

  /// ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
  String get fullNameEN {
    final parts = [titleEN, firstnameEN, lastnameEN]
        .where((part) => part?.isNotEmpty == true);
    return parts.join(' ');
  }

  /// ‡πÄ‡∏û‡∏®‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  String get genderText {
    switch (gender) {
      case 1:
        return '‡∏ä‡∏≤‡∏¢';
      case 2:
        return '‡∏´‡∏ç‡∏¥‡∏á';
      default:
        return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    }
  }
}

/// Exception ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£
class CardReaderException implements Exception {
  final String message;
  final String code;
  final dynamic originalError;

  const CardReaderException(this.message, this.code, [this.originalError]);

  @override
  String toString() => 'CardReaderException($code): $message';
}

/// Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏ó‡∏¢
class CardReaderService extends ChangeNotifier {
  static final CardReaderService _instance = CardReaderService._internal();
  factory CardReaderService() => _instance;
  CardReaderService._internal();

  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  CardReaderConnectionStatus _connectionStatus = CardReaderConnectionStatus.disconnected;
  CardReadingStatus _readingStatus = CardReadingStatus.idle;
  UsbDevice? _currentDevice;
  String? _lastError;
  ThaiIdCardData? _lastReadData;
  
  // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
  Duration _readTimeout = const Duration(seconds: 10);
  final int _maxRetryAttempts = 3;
  Duration _retryDelay = const Duration(seconds: 1);

  // Streams ‡πÅ‡∏•‡∏∞ Subscriptions
  StreamSubscription<UsbDevice>? _deviceStreamSubscription;
  StreamSubscription? _cardStreamSubscription;
  Timer? _connectionTimer;
  Timer? _readTimeoutTimer;

  // Getters
  CardReaderConnectionStatus get connectionStatus => _connectionStatus;
  CardReadingStatus get readingStatus => _readingStatus;
  UsbDevice? get currentDevice => _currentDevice;
  String? get lastError => _lastError;
  ThaiIdCardData? get lastReadData => _lastReadData;
  bool get isConnected => _connectionStatus == CardReaderConnectionStatus.connected;
  bool get isReading => _readingStatus == CardReadingStatus.reading;

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£
  Future<void> initialize() async {
    try {
      debugPrint('üîß CardReaderService: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');
      _setConnectionStatus(CardReaderConnectionStatus.connecting);
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout ‡∏ï‡∏≤‡∏° platform
      _configureTimeouts();
      
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á USB device events
      _startListeningToDeviceEvents();
      
      debugPrint('‚úÖ CardReaderService: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (e) {
      debugPrint('‚ùå CardReaderService: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ', 'INIT_ERROR', e);
    }
  }

  /// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout ‡∏ï‡∏≤‡∏° platform
  void _configureTimeouts() {
    if (Platform.isAndroid) {
      _readTimeout = const Duration(seconds: 15); // Android ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤
      _retryDelay = const Duration(seconds: 2);
    } else {
      _readTimeout = const Duration(seconds: 10); // Desktop ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤
      _retryDelay = const Duration(seconds: 1);
    }
    debugPrint('‚è±Ô∏è CardReaderService: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout = ${_readTimeout.inSeconds}s');
  }

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á USB device events
  void _startListeningToDeviceEvents() {
    _deviceStreamSubscription?.cancel();
    _deviceStreamSubscription = ThaiIdcardReaderFlutter.deviceHandlerStream.listen(
      _onDeviceEvent,
      onError: _onDeviceError,
    );
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ device events
  void _onDeviceEvent(UsbDevice device) {
    debugPrint('üì± CardReaderService: Device event - ${device.productName}');
    
    _currentDevice = device;
    
    if (device.hasPermission && device.isAttached) {
      _setConnectionStatus(CardReaderConnectionStatus.connected);
      _startListeningToCardEvents();
    } else if (device.isAttached && !device.hasPermission) {
      _setError('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£', 'NO_PERMISSION');
    } else {
      _setConnectionStatus(CardReaderConnectionStatus.disconnected);
      _stopListeningToCardEvents();
    }
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ device errors
  void _onDeviceError(dynamic error) {
    debugPrint('‚ùå CardReaderService: Device error - $error');
    _setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£', 'DEVICE_ERROR', error);
  }

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á card events
  void _startListeningToCardEvents() {
    _cardStreamSubscription?.cancel();
    _cardStreamSubscription = ThaiIdcardReaderFlutter.cardHandlerStream.listen(
      _onCardEvent,
      onError: _onCardError,
    );
  }

  /// ‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á card events
  void _stopListeningToCardEvents() {
    _cardStreamSubscription?.cancel();
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ card events
  void _onCardEvent(dynamic cardEvent) {
    debugPrint('üí≥ CardReaderService: Card event - ${cardEvent.isReady}');
    
    if (cardEvent.isReady && !isReading) {
      // ‡∏ö‡∏±‡∏ï‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏° - ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      _performCardRead();
    } else if (!cardEvent.isReady) {
      // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£
      _setReadingStatus(CardReadingStatus.noCard);
    }
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ card errors
  void _onCardError(dynamic error) {
    debugPrint('‚ùå CardReaderService: Card error - $error');
    _setReadingStatus(CardReadingStatus.failed);
  }

  /// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (manual trigger)
  Future<ThaiIdCardData?> readCard({
    int? retryAttempts,
    Duration? timeout,
  }) async {
    if (!isConnected) {
      throw const CardReaderException(
        '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 
        'NOT_CONNECTED'
      );
    }

    if (isReading) {
      throw const CardReaderException(
        '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà', 
        'ALREADY_READING'
      );
    }

    final attempts = retryAttempts ?? _maxRetryAttempts;
    final readTimeout = timeout ?? _readTimeout;

    for (int attempt = 1; attempt <= attempts; attempt++) {
      try {
        debugPrint('üìñ CardReaderService: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà $attempt/$attempts');
        
        final result = await _performCardRead(timeout: readTimeout);
        if (result != null) {
          return result;
        }
        
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏µ‡∏Å ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
        if (attempt < attempts) {
          await Future.delayed(_retryDelay);
        }
        
      } catch (e) {
        debugPrint('‚ùå CardReaderService: ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà $attempt ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - $e');
        
        if (attempt == attempts) {
          rethrow; // ‡∏û‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô error
        }
        
        await Future.delayed(_retryDelay);
      }
    }

    throw const CardReaderException(
      '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      'READ_FAILED'
    );
  }

  /// ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£
  Future<ThaiIdCardData?> _performCardRead({Duration? timeout}) async {
    _setReadingStatus(CardReadingStatus.reading);
    _clearError();

    final readTimeout = timeout ?? _readTimeout;
    
    try {
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout timer
      _readTimeoutTimer?.cancel();
      _readTimeoutTimer = Timer(readTimeout, () {
        throw const CardReaderException(
          '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£',
          'READ_TIMEOUT'
        );
      });

      // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      final result = await ThaiIdcardReaderFlutter.read();
      _readTimeoutTimer?.cancel();

      if (result.cid == null || result.cid!.isEmpty) {
        _setReadingStatus(CardReadingStatus.noCard);
        return null;
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ThaiIdCardData
      final cardData = ThaiIdCardData.fromThaiIDCard(result);
      
      if (!cardData.isValid) {
        _setReadingStatus(CardReadingStatus.cardDamaged);
        throw const CardReaderException(
          '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå',
          'INVALID_CARD_DATA'
        );
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      _lastReadData = cardData;
      _setReadingStatus(CardReadingStatus.success);
      
      debugPrint('‚úÖ CardReaderService: ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ${cardData.fullNameTH}');
      return cardData;
      
    } catch (e) {
      _readTimeoutTimer?.cancel();
      _setReadingStatus(CardReadingStatus.failed);
      
      if (e is CardReaderException) {
        rethrow;
      } else {
        throw CardReaderException(
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£: $e',
          'READ_ERROR',
          e,
        );
      }
    }
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (Enhanced version with deeper reset)
  Future<void> resetConnection() async {
    try {
      debugPrint('üîÑ CardReaderService: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á...');
      
      _setConnectionStatus(CardReaderConnectionStatus.connecting);
      
      // 1. ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      await _stopAllListeners();
      
      // 2. ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà cache ‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      _currentDevice = null;
      _lastReadData = null;
      _lastError = null;
      
      // 3. ‡∏£‡∏≠‡πÉ‡∏´‡πâ USB subsystem ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
      debugPrint('‚è≥ CardReaderService: ‡∏£‡∏≠ USB subsystem reset...');
      await Future.delayed(const Duration(seconds: 3));
      
      // 4. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
      debugPrint('üîÑ CardReaderService: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà...');
      await initialize();
      
      // 5. ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      await Future.delayed(const Duration(seconds: 1));
      
      debugPrint('‚úÖ CardReaderService: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
    } catch (e) {
      debugPrint('‚ùå CardReaderService: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ - ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏≠‡∏î USB ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏™‡∏µ‡∏¢‡∏ö‡πÉ‡∏´‡∏°‡πà', 'ENHANCED_RESET_ERROR', e);
    }
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥)
  Future<void> quickResetConnection() async {
    try {
      debugPrint('üîÑ CardReaderService: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß...');
      
      _setConnectionStatus(CardReaderConnectionStatus.connecting);
      
      // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      await _stopAllListeners();
      
      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
      await Future.delayed(const Duration(milliseconds: 500));
      
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
      await initialize();
      
      debugPrint('‚úÖ CardReaderService: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
    } catch (e) {
      debugPrint('‚ùå CardReaderService: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡πá‡∏ß‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ', 'QUICK_RESET_ERROR', e);
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  Future<bool> checkConnection() async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö device
      if (_currentDevice == null || !_currentDevice!.isAttached) {
        _setConnectionStatus(CardReaderConnectionStatus.disconnected);
        return false;
      }
      
      if (!_currentDevice!.hasPermission) {
        _setConnectionStatus(CardReaderConnectionStatus.error);
        return false;
      }
      
      _setConnectionStatus(CardReaderConnectionStatus.connected);
      return true;
      
    } catch (e) {
      debugPrint('‚ùå CardReaderService: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - $e');
      _setConnectionStatus(CardReaderConnectionStatus.error);
      return false;
    }
  }

  /// ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<void> _stopAllListeners() async {
    _deviceStreamSubscription?.cancel();
    _cardStreamSubscription?.cancel();
    _connectionTimer?.cancel();
    _readTimeoutTimer?.cancel();
  }

  /// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  void _setConnectionStatus(CardReaderConnectionStatus status) {
    if (_connectionStatus != status) {
      _connectionStatus = status;
      notifyListeners();
      debugPrint('üîó CardReaderService: Connection status = $status');
    }
  }

  /// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô
  void _setReadingStatus(CardReadingStatus status) {
    if (_readingStatus != status) {
      _readingStatus = status;
      notifyListeners();
      debugPrint('üìñ CardReaderService: Reading status = $status');
    }
  }

  /// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ error
  void _setError(String message, String code, [dynamic originalError]) {
    _lastError = message;
    _setConnectionStatus(CardReaderConnectionStatus.error);
    notifyListeners();
    
    debugPrint('‚ùå CardReaderService: Error($code) = $message');
    if (originalError != null) {
      debugPrint('   Original: $originalError');
    }
  }

  /// ‡∏•‡πâ‡∏≤‡∏á error
  void _clearError() {
    if (_lastError != null) {
      _lastError = null;
      notifyListeners();
    }
  }

  /// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
  @override
  void dispose() {
    debugPrint('üßπ CardReaderService: Disposing...');
    _stopAllListeners();
    super.dispose();
  }

  /// ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  Map<String, dynamic> getUsageStats() {
    return {
      'connectionStatus': _connectionStatus.name,
      'readingStatus': _readingStatus.name,
      'hasDevice': _currentDevice != null,
      'deviceName': _currentDevice?.productName,
      'lastReadTime': _lastReadData?.readTimestamp.toIso8601String(),
      'lastError': _lastError,
    };
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï USB ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool shouldUsePhysicalReset() {
    return _lastError?.contains('ENHANCED_RESET_ERROR') == true ||
           _connectionStatus == CardReaderConnectionStatus.error;
  }

  /// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï USB ‡∏à‡∏£‡∏¥‡∏á
  String getPhysicalResetInstructions() {
    return '''
üîß ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï USB ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏£‡∏µ‡∏î‡πÄ‡∏î‡∏≠‡∏£‡πå:

‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ USB ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå 
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

1. ‚ùå ‡∏ñ‡∏≠‡∏î‡∏™‡∏≤‡∏¢ USB ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
2. ‚è≥ ‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 3-5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ  
3. ‚úÖ ‡πÄ‡∏™‡∏µ‡∏¢‡∏ö‡∏™‡∏≤‡∏¢ USB ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
4. üîç ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£
5. üì± ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á

‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: 
- ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å Plugin thai_idcard_reader_flutter 
  ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï USB ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå
- ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö Flutter ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Hub USB ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ
    ''';
  }
}