import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as path;
import 'db_helper.dart';
import '../models/room_model.dart';

/// Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
class MapService {
  static final MapService _instance = MapService._internal();
  factory MapService() => _instance;
  MapService._internal();

  final DbHelper _dbHelper = DbHelper();
  final ImagePicker _imagePicker = ImagePicker();

  // =================== MAP MANAGEMENT ===================

  /// ‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<List<MapData>> getAllMaps() async {
    return await _dbHelper.fetchAllMaps();
  }

  /// ‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  Future<MapData?> getActiveMap() async {
    return await _dbHelper.fetchActiveMap();
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û (‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ)
  Future<String?> _captureImageWithFallback() async {
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    try {
      final XFile? image = await _imagePicker.pickImage(
        source: ImageSource.camera,
        imageQuality: 80,
      );
      if (image != null) return await _saveImageToStorage(image);
    } catch (e) {
      debugPrint('Method 1 failed: $e');
    }

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    try {
      final XFile? image = await _imagePicker.pickImage(
        source: ImageSource.camera,
        preferredCameraDevice: CameraDevice.rear,
        maxWidth: 1024,
        maxHeight: 1024,
        imageQuality: 75,
      );
      if (image != null) return await _saveImageToStorage(image);
    } catch (e) {
      debugPrint('Method 2 failed: $e');
    }

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
    try {
      final XFile? image = await _imagePicker.pickImage(
        source: ImageSource.camera,
        preferredCameraDevice: CameraDevice.front,
        maxWidth: 800,
        maxHeight: 800,
        imageQuality: 70,
      );
      if (image != null) return await _saveImageToStorage(image);
    } catch (e) {
      debugPrint('Method 3 failed: $e');
    }

    // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    throw Exception('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà" ‡πÅ‡∏ó‡∏ô\n\n‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å (mobile_scanner) ‡∏ã‡∏∂‡πà‡∏á‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û (image_picker)');
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á storage ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
  Future<String> _saveImageToStorage(XFile image) async {
    final appDir = await getApplicationDocumentsDirectory();
    final mapDir = Directory(path.join(appDir.path, 'maps'));
    if (!await mapDir.exists()) {
      await mapDir.create(recursive: true);
    }

    final fileName = 'map_${DateTime.now().millisecondsSinceEpoch}.jpg';
    final newPath = path.join(mapDir.path, fileName);
    
    try {
      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
      final originalFile = File(image.path);
      final bytes = await originalFile.readAsBytes();
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏ñ‡πâ‡∏≤‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
      if (bytes.length > 5 * 1024 * 1024) { // 5MB
        debugPrint('Image size: ${(bytes.length / 1024 / 1024).toStringAsFixed(2)}MB - Resizing...');
        
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏Ñ‡∏∑‡∏≠ copy ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
        // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ resize ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏î‡πâ‡∏ß‡∏¢ package ‡πÄ‡∏ä‡πà‡∏ô image
        final File newFile = await originalFile.copy(newPath);
        
        debugPrint('Image saved with size: ${(await newFile.length() / 1024 / 1024).toStringAsFixed(2)}MB');
        return newFile.path;
      } else {
        // ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å copy ‡∏ï‡∏£‡∏á ‡πÜ
        final File newFile = await originalFile.copy(newPath);
        debugPrint('Image saved (original size): ${(bytes.length / 1024 / 1024).toStringAsFixed(2)}MB');
        return newFile.path;
      }
    } catch (e) {
      debugPrint('Error processing image: $e');
      // Fallback: copy ‡∏ï‡∏£‡∏á ‡πÜ
      final File newFile = await File(image.path).copy(newPath);
      return newFile.path;
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
  Future<String?> uploadMapImage({ImageSource source = ImageSource.gallery}) async {
    try {
      if (source == ImageSource.camera) {
        // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
        return await _captureImageWithFallback();
      } else {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö gallery ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
        final XFile? image = await _imagePicker.pickImage(
          source: source,
          maxWidth: 2048,
          maxHeight: 2048,
          imageQuality: 85,
        );

        if (image == null) return null;
        return await _saveImageToStorage(image);
      }
    } on PlatformException catch (e) {
      debugPrint('PlatformException details: code=${e.code}, message=${e.message}, details=${e.details}');
      
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      switch (e.code) {
        case 'no_available_camera':
          if (source == ImageSource.camera) {
            throw Exception(
              '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ\n\n'
              'üì± ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n'
              '‚Ä¢ ‡πÉ‡∏ä‡πâ "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà" ‡πÅ‡∏ó‡∏ô\n'
              '‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏≠‡∏õ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà'
            );
          } else {
            throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÑ‡∏î‡πâ');
          }
        case 'camera_access_denied':
          throw Exception('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ');
        case 'photo_access_denied':
          throw Exception('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ');
        case 'invalid_image':
          throw Exception('‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        default:
          throw Exception('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.code}\n${e.message ?? ''}');
      }
    } catch (e) {
      debugPrint('General error uploading map image: $e');
      if (e.toString().contains('Exception:')) {
        rethrow; // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ Exception ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
      }
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: $e');
    }
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
  Future<int?> saveMap({
    required String name,
    String? imagePath,
    double? imageWidth,
    double? imageHeight,
    String? description,
  }) async {
    try {
      final mapData = MapData.create(
        name: name,
        imagePath: imagePath,
        imageWidth: imageWidth,
        imageHeight: imageHeight,
        description: description,
      );

      return await _dbHelper.insertMap(mapData);
    } catch (e) {
      debugPrint('Error saving map: $e');
      return null;
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  Future<bool> updateMap(MapData mapData) async {
    try {
      await _dbHelper.updateMap(mapData);
      return true;
    } catch (e) {
      debugPrint('Error updating map: $e');
      return false;
    }
  }

  /// ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô active
  Future<bool> setActiveMap(int mapId) async {
    try {
      await _dbHelper.setActiveMap(mapId);
      return true;
    } catch (e) {
      debugPrint('Error setting active map: $e');
      return false;
    }
  }

  /// ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  Future<bool> deleteMap(int mapId) async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
      final maps = await _dbHelper.fetchAllMaps();
      final mapToDelete = maps.where((m) => m.id == mapId).firstOrNull;

      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (mapToDelete?.imagePath != null) {
        final file = File(mapToDelete!.imagePath!);
        if (await file.exists()) {
          await file.delete();
        }
      }

      // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await _dbHelper.deleteMap(mapId);
      return true;
    } catch (e) {
      debugPrint('Error deleting map: $e');
      return false;
    }
  }

  // =================== ROOM MANAGEMENT ===================

  /// ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<List<Room>> getAllRooms() async {
    return await _dbHelper.fetchAllRooms();
  }

  /// ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  Future<List<Room>> getRoomsWithPosition() async {
    return await _dbHelper.fetchRoomsWithPosition();
  }

  /// ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  Future<List<Room>> getRoomsByStatus(RoomStatus status) async {
    return await _dbHelper.fetchRoomsByStatus(status);
  }

  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà
  Future<int?> addRoom({
    required String name,
    required RoomSize size,
    RoomShape shape = RoomShape.square,
    required int capacity,
    String? description,
  }) async {
    try {
      final room = Room.create(
        name: name,
        size: size,
        shape: shape,
        capacity: capacity,
        description: description,
      );

      return await _dbHelper.insertRoom(room);
    } catch (e) {
      debugPrint('Error adding room: $e');
      return null;
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
  Future<bool> updateRoom(Room room) async {
    try {
      await _dbHelper.updateRoom(room);
      return true;
    } catch (e) {
      debugPrint('Error updating room: $e');
      return false;
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å (‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô percentage)
  Future<bool> updateRoomPosition(int roomId, double x, double y) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final isOccupied = await _dbHelper.isPositionOccupied(x, y, excludeRoomId: roomId);
      if (isOccupied) {
        return false; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô percentage (0-100)
      await _dbHelper.updateRoomPosition(roomId, x, y);
      return true;
    } catch (e) {
      debugPrint('Error updating room position: $e');
      return false;
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
  Future<bool> updateRoomStatus(int roomId, RoomStatus status, {String? occupantId}) async {
    try {
      await _dbHelper.updateRoomStatus(roomId, status, occupantId: occupantId);
      return true;
    } catch (e) {
      debugPrint('Error updating room status: $e');
      return false;
    }
  }

  /// ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
  Future<bool> deleteRoom(int roomId) async {
    try {
      await _dbHelper.deleteRoom(roomId);
      return true;
    } catch (e) {
      debugPrint('Error deleting room: $e');
      return false;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<bool> canPlaceRoom(double x, double y, {int? excludeRoomId}) async {
    return !(await _dbHelper.isPositionOccupied(x, y, excludeRoomId: excludeRoomId));
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
  Future<(double, double)?> findAvailablePosition({
    double startX = 50,
    double startY = 50,
    double spacing = 80,
    double maxX = 800,
    double maxY = 600,
  }) async {
    for (double y = startY; y < maxY; y += spacing) {
      for (double x = startX; x < maxX; x += spacing) {
        if (await canPlaceRoom(x, y)) {
          return (x, y);
        }
      }
    }
    return null; // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á
  }

  // =================== ROOM STATUS MANAGEMENT ===================

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
  Future<void> updateRoomStatusFromStays() async {
    try {
      final allRooms = await getAllRooms();
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å

      for (final room in allRooms) {
        if (room.currentOccupant != null) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          final stayStatus = await _dbHelper.checkStayStatus(room.currentOccupant!);
          
          if (stayStatus['isActive'] == true) {
            // ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏ô‡∏û‡∏±‡∏Å
            await updateRoomStatus(room.id!, RoomStatus.occupied, occupantId: room.currentOccupant);
          } else {
            // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏û‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß
            await updateRoomStatus(room.id!, RoomStatus.available);
          }
        }
      }
    } catch (e) {
      debugPrint('Error updating room status from stays: $e');
    }
  }

  /// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
  Future<bool> assignRoomToVisitor(int roomId, String visitorId) async {
    try {
      final room = await _dbHelper.fetchRoomById(roomId);
      if (room == null || !room.isAvailable) {
        return false; // ‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
      }

      await updateRoomStatus(roomId, RoomStatus.occupied, occupantId: visitorId);
      return true;
    } catch (e) {
      debugPrint('Error assigning room to visitor: $e');
      return false;
    }
  }

  /// ‡∏õ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
  Future<bool> unassignRoomFromVisitor(int roomId) async {
    try {
      await updateRoomStatus(roomId, RoomStatus.available);
      return true;
    } catch (e) {
      debugPrint('Error unassigning room from visitor: $e');
      return false;
    }
  }

  // =================== UTILITY METHODS ===================

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
  Future<Map<String, dynamic>> getRoomStatistics() async {
    try {
      final allRooms = await getAllRooms();
      final availableRooms = allRooms.where((r) => r.status == RoomStatus.available);
      final occupiedRooms = allRooms.where((r) => r.status == RoomStatus.occupied);
      final reservedRooms = allRooms.where((r) => r.status == RoomStatus.reserved);
      final roomsWithPosition = allRooms.where((r) => r.hasPosition);

      return {
        'totalRooms': allRooms.length,
        'availableRooms': availableRooms.length,
        'occupiedRooms': occupiedRooms.length,
        'reservedRooms': reservedRooms.length,
        'roomsWithPosition': roomsWithPosition.length,
        'roomsWithoutPosition': allRooms.length - roomsWithPosition.length,
        'totalCapacity': allRooms.fold<int>(0, (sum, room) => sum + room.capacity),
        'availableCapacity': availableRooms.fold<int>(0, (sum, room) => sum + room.capacity),
      };
    } catch (e) {
      debugPrint('Error getting room statistics: $e');
      return {};
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  Future<void> createTestData() async {
    try {
      await _dbHelper.createTestRooms();
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await saveMap(
        name: '‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        description: '‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
      );
    } catch (e) {
      debugPrint('Error creating test data: $e');
    }
  }

  /// ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<void> clearAllData() async {
    try {
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      final maps = await getAllMaps();
      for (final map in maps) {
        if (map.imagePath != null) {
          final file = File(map.imagePath!);
          if (await file.exists()) {
            await file.delete();
          }
        }
      }

      // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await _dbHelper.clearMapAndRoomData();
    } catch (e) {
      debugPrint('Error clearing all data: $e');
    }
  }
}