import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../models/reg_data.dart';
import '../services/menu_settings_service.dart';
import '../services/printer_service.dart';
import '../services/db_helper.dart';

/// Shared Registration Dialog extracted from Manual Form
/// This dialog is used by both Manual Form and ID Card registration flows
/// Contains fields for: ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏ß, ‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏Ç‡∏≤‡∏ß, ‡πÄ‡∏™‡∏∑‡πà‡∏≠, ‡∏´‡∏°‡∏≠‡∏ô, ‡∏ú‡πâ‡∏≤‡∏´‡πà‡∏° and other details
class SharedRegistrationDialog extends StatefulWidget {
  final String regId;
  final RegAdditionalInfo? existingInfo;
  final StayRecord? latestStay;
  final bool canCreateNew;
  final Function()? onCompleted;

  const SharedRegistrationDialog({
    super.key,
    required this.regId,
    this.existingInfo,
    this.latestStay,
    this.canCreateNew = true,
    this.onCompleted,
  });

  @override
  State<SharedRegistrationDialog> createState() => _SharedRegistrationDialogState();
}

class _SharedRegistrationDialogState extends State<SharedRegistrationDialog> {
  DateTime? startDate;
  DateTime? endDate;
  late final TextEditingController shirtCtrl;
  late final TextEditingController pantsCtrl;
  late final TextEditingController matCtrl;
  late final TextEditingController pillowCtrl;
  late final TextEditingController blanketCtrl;
  late final TextEditingController locationCtrl;
  late final TextEditingController notesCtrl;
  late final TextEditingController childrenCtrl;
  bool withChildren = false;

  @override
  void initState() {
    super.initState();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á controllers
    shirtCtrl = TextEditingController();
    pantsCtrl = TextEditingController();
    matCtrl = TextEditingController();
    pillowCtrl = TextEditingController();
    blanketCtrl = TextEditingController();
    locationCtrl = TextEditingController();
    notesCtrl = TextEditingController();
    childrenCtrl = TextEditingController();

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å - ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å stays table ‡πÄ‡∏™‡∏°‡∏≠
    if (widget.latestStay != null && !widget.canCreateNew) {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stays table
      final stay = widget.latestStay!;
      startDate = stay.startDate;
      endDate = stay.endDate;
      notesCtrl.text = stay.note ?? '';
    } else {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
      final today = DateTime.now();
      startDate = today;
      endDate = today; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (1 ‡∏ß‡∏±‡∏ô)
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    if (widget.existingInfo != null) {
      final info = widget.existingInfo!;
      shirtCtrl.text = info.shirtCount?.toString() ?? '0';
      pantsCtrl.text = info.pantsCount?.toString() ?? '0';
      matCtrl.text = info.matCount?.toString() ?? '0';
      pillowCtrl.text = info.pillowCount?.toString() ?? '0';
      blanketCtrl.text = info.blanketCount?.toString() ?? '0';
      locationCtrl.text = info.location ?? '';
      withChildren = info.withChildren;
      childrenCtrl.text = info.childrenCount?.toString() ?? '0';

      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ stays record ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å additional_info
      if (notesCtrl.text.isEmpty && info.notes?.isNotEmpty == true) {
        notesCtrl.text = info.notes!;
      }
    } else {
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      shirtCtrl.text = '0';
      pantsCtrl.text = '0';
      matCtrl.text = '0';
      pillowCtrl.text = '0';
      blanketCtrl.text = '0';
      childrenCtrl.text = '1'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 1
    }
  }

  @override
  void dispose() {
    shirtCtrl.dispose();
    pantsCtrl.dispose();
    matCtrl.dispose();
    pillowCtrl.dispose();
    blanketCtrl.dispose();
    locationCtrl.dispose();
    notesCtrl.dispose();
    childrenCtrl.dispose();
    super.dispose();
  }

  void _updateNumberField(
    TextEditingController controller,
    int change, {
    int min = 0,
    int max = 9,
  }) {
    final currentValue = int.tryParse(controller.text) ?? min;
    final newValue = (currentValue + change).clamp(min, max);
    setState(() {
      controller.text = newValue.toString();
    });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  String? _validateDates() {
    if (startDate == null || endDate == null) {
      return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î';
    }

    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final startDateOnly = DateTime(
      startDate!.year,
      startDate!.month,
      startDate!.day,
    );
    final endDateOnly = DateTime(endDate!.year, endDate!.month, endDate!.day);

    // 1. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if (startDateOnly.isAfter(today)) {
      return '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô';
    }

    // 2. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ)
    if (startDateOnly.isAfter(endDateOnly)) {
      return '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î';
    }

    // 3. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç active stay)
    if (!widget.canCreateNew || (widget.latestStay?.isActive ?? false)) {
      if (endDateOnly.isBefore(today)) {
        return '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô';
      }
    }

    return null;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<bool> _hasRoomBooking(String regId) async {
    try {
      final db = await DbHelper().db;

      final result = await db.query(
        'room_bookings',
        where: 'visitor_id = ? AND status != ?',
        whereArgs: [regId, 'cancelled'],
        orderBy: 'check_in_date DESC',
        limit: 1,
      );

      return result.isNotEmpty;
    } catch (e) {
      debugPrint('Error checking room booking: $e');
      return false;
    }
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°" ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool _isBookingOutsideNewStayRange({
    required DateTime bookingStart,
    required DateTime bookingEnd,
    required DateTime newStayStart,
    required DateTime newStayEnd,
  }) {
    // ‡∏´‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
    debugPrint('üìå bookingStart: $bookingStart, bookingEnd: $bookingEnd');
    return bookingStart.isBefore(newStayStart) ||
        bookingEnd.isAfter(newStayEnd);
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
  Future<DateTimeRange?> _getBookingDateRange(String regId) async {
    try {
      final db = await DbHelper().db;

      final result = await db.query(
        'room_bookings',
        where: 'visitor_id = ? AND status != ?',
        whereArgs: [regId, 'cancelled'],
        orderBy: 'check_in_date ASC',
      );

      if (result.isEmpty) return null;

      final start = result
          .map((b) => DateTime.parse(b['check_in_date'] as String))
          .reduce((a, b) => a.isBefore(b) ? a : b);
      final end = result
          .map((b) => DateTime.parse(b['check_out_date'] as String))
          .reduce((a, b) => a.isAfter(b) ? a : b);

      return DateTimeRange(start: start, end: end);
    } catch (e) {
      debugPrint('Error getting booking date range: $e');
      return null;
    }
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö validation ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
  Future<String?> _validateDatesWithRoomBooking() async {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ start > end
    final basicValidation = _validateDates();
    if (basicValidation != null) {
      return basicValidation;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°"
    if (!widget.canCreateNew && widget.regId.isNotEmpty) {
      final hasBooking = await _hasRoomBooking(widget.regId);

      if (hasBooking) {
        final now = DateTime.now();
        final today = DateTime(now.year, now.month, now.day);
        final newStart = DateTime(
          startDate!.year,
          startDate!.month,
          startDate!.day,
        );
        final newEnd = DateTime(endDate!.year, endDate!.month, endDate!.day);

        // ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        if (newStart.isBefore(today)) {
          return '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß';
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°" ‡∏ä‡πà‡∏ß‡∏á‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        final bookingRange = await _getBookingDateRange(widget.regId);
        if (bookingRange != null) {
          final bookingStart = DateTime(
            bookingRange.start.year,
            bookingRange.start.month,
            bookingRange.start.day,
          );
          final bookingEnd = DateTime(
            bookingRange.end.year,
            bookingRange.end.month,
            bookingRange.end.day,
          );

          final isOutside = _isBookingOutsideNewStayRange(
            bookingStart: bookingStart,
            bookingEnd: bookingEnd,
            newStayStart: newStart,
            newStayEnd: newEnd,
          );

          if (isOutside) {
            return '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡πÉ‡∏´‡πâ‡∏Ç‡∏±‡∏î‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô';
          }
        }
      }
    }

    return null;
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  Future<void> _saveStayData() async {
    debugPrint('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å...');
    debugPrint('üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: $startDate');
    debugPrint('üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: $endDate');
    debugPrint('üë§ RegId: ${widget.regId}');
    debugPrint('üÜï canCreateNew: ${widget.canCreateNew}');
    debugPrint('üìù latestStay: ${widget.latestStay?.id}');

    final dateValidation = await _validateDatesWithRoomBooking();
    if (dateValidation != null) {
      debugPrint('‚ùå Validation failed: $dateValidation');
      if (mounted) {
        await showDialog(
          context: context,
          barrierDismissible: false,
          builder: (context) => AlertDialog(
            title: Row(
              children: [
                const Icon(Icons.error_outline, color: Colors.red, size: 24),
                const SizedBox(width: 8),
                const Expanded(
                  child: Text(
                    '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                    style: TextStyle(color: Colors.red),
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),
            content: Text(dateValidation, style: const TextStyle(fontSize: 16)),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('‡∏ï‡∏Å‡∏•‡∏á', style: TextStyle(fontSize: 16)),
              ),
            ],
          ),
        );
      }
      return;
    }

    try {
      debugPrint('‚úÖ Validation ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Stay record
      StayRecord? stayRecordForPrint;
      if (widget.canCreateNew) {
        debugPrint('üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Stay ‡πÉ‡∏´‡∏°‡πà...');
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Stay ‡πÉ‡∏´‡∏°‡πà
        final newStay = StayRecord.create(
          visitorId: widget.regId,
          startDate: startDate!,
          endDate: endDate!,
          note: notesCtrl.text.trim(),
        );
        debugPrint('üìù Stay record ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${newStay.toMap()}');
        final stayId = await DbHelper().insertStay(newStay);
        debugPrint('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Stay ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID: $stayId');
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á StayRecord ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        stayRecordForPrint = StayRecord(
          id: stayId,
          visitorId: newStay.visitorId,
          startDate: newStay.startDate,
          endDate: newStay.endDate,
          status: newStay.status,
          note: newStay.note,
          createdAt: newStay.createdAt,
        );
      } else if (widget.latestStay != null) {
        debugPrint('üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Stay ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...');
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Stay ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        final updatedStay = widget.latestStay!.copyWith(
          startDate: startDate,
          endDate: endDate,
          note: notesCtrl.text.trim(),
        );
        await DbHelper().updateStay(updatedStay);
        debugPrint('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Stay ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        stayRecordForPrint = updatedStay;
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique visitId ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ createdAt ‡∏Ç‡∏≠‡∏á stay record
      final visitId =
          '${widget.regId}_${stayRecordForPrint!.createdAt.millisecondsSinceEpoch}';
      debugPrint('üÜî ‡∏™‡∏£‡πâ‡∏≤‡∏á visitId: $visitId');

      final additionalInfo = RegAdditionalInfo.create(
        regId: widget.regId,
        visitId: visitId, // ‡πÉ‡∏ä‡πâ unique visitId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ
        startDate: null, // ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å stays table
        endDate: null, // ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å stays table
        shirtCount: int.tryParse(shirtCtrl.text) ?? 0,
        pantsCount: int.tryParse(pantsCtrl.text) ?? 0,
        matCount: int.tryParse(matCtrl.text) ?? 0,
        pillowCount: int.tryParse(pillowCtrl.text) ?? 0,
        blanketCount: int.tryParse(blanketCtrl.text) ?? 0,
        location: locationCtrl.text.trim(),
        withChildren: withChildren,
        childrenCount: withChildren
            ? (int.tryParse(childrenCtrl.text) ?? 0)
            : null,
        notes: '', // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ stays table ‡πÅ‡∏•‡πâ‡∏ß
      );

      debugPrint('üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${additionalInfo.toMap()}');
      await DbHelper().insertAdditionalInfo(additionalInfo);
      debugPrint('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏ö‡∏¥‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡∏≤‡∏ß
      final isWhiteRobeEnabled = await MenuSettingsService().isWhiteRobeEnabled;
      debugPrint('üñ®Ô∏è ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏ö‡∏¥‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡∏≤‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà: $isWhiteRobeEnabled');

      if (isWhiteRobeEnabled) {
        debugPrint('üñ®Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à...');
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        final regData = await DbHelper().fetchById(widget.regId);
        if (regData != null) {
          await PrinterService().printReceipt(
            regData,
            additionalInfo: additionalInfo,
            stayRecord: stayRecordForPrint,
          );
          debugPrint('‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } else {
          debugPrint('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô');
        }
      } else {
        debugPrint('‚ÑπÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏ö‡∏¥‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡∏≤‡∏ß‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à');
      }

      debugPrint('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏õ‡∏¥‡∏î dialog');
      if (mounted) {
        Navigator.of(context).pop();
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        widget.onCompleted?.call();
      }
    } catch (e) {
      debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: $e');
      debugPrint('üìã Stack trace: ${StackTrace.current}');
      if (mounted) {
        await showDialog(
          context: context,
          barrierDismissible: false,
          builder: (context) => AlertDialog(
            title: Row(
              children: [
                const Icon(Icons.error_outline, color: Colors.red, size: 24),
                const SizedBox(width: 8),
                const Expanded(
                  child: Text(
                    '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                    style: TextStyle(color: Colors.red),
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),
            content: Text(
              '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: $e',
              style: const TextStyle(fontSize: 16),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('‡∏ï‡∏Å‡∏•‡∏á', style: TextStyle(fontSize: 16)),
              ),
            ],
          ),
        );
      }
    }
  }

  Widget _buildNumberField({
    required String label,
    required TextEditingController controller,
    required VoidCallback onDecrease,
    required VoidCallback onIncrease,
  }) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Row(
        children: [
          // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏î‡∏Ñ‡πà‡∏≤ (-)
          SizedBox(
            width: 48,
            height: 48,
            child: ElevatedButton(
              onPressed: onDecrease,
              style: ElevatedButton.styleFrom(
                shape: const CircleBorder(),
                padding: EdgeInsets.zero,
              ),
              child: const Icon(Icons.remove, size: 20),
            ),
          ),
          const SizedBox(width: 12),
          // Field ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
          Expanded(
            child: TextFormField(
              controller: controller,
              textAlign: TextAlign.center,
              readOnly: true,
              decoration: InputDecoration(
                labelText: label,
                border: const OutlineInputBorder(),
                contentPadding: const EdgeInsets.symmetric(
                  vertical: 16,
                  horizontal: 12,
                ),
              ),
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
          ),
          const SizedBox(width: 12),
          // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ (+)
          SizedBox(
            width: 48,
            height: 48,
            child: ElevatedButton(
              onPressed: onIncrease,
              style: ElevatedButton.styleFrom(
                shape: const CircleBorder(),
                padding: EdgeInsets.zero,
              ),
              child: const Icon(Icons.add, size: 20),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(
        widget.canCreateNew ? '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà' : '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å',
      ),
      content: SizedBox(
        width: MediaQuery.of(context).size.width * 0.9, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(8.0), // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏£‡∏≠‡∏ö‡πÜ
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                Container(
                  margin: const EdgeInsets.only(bottom: 16),
                  child: InkWell(
                    onTap: () async {
                      final picked = await showDatePicker(
                        context: context,
                        initialDate: DateTime.now(),
                        firstDate: DateTime(2020),
                        lastDate: DateTime(2100),
                      );
                      if (picked != null && mounted) {
                        setState(() => startDate = picked);
                      }
                    },
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                        vertical: 16,
                        horizontal: 12,
                      ),
                      decoration: BoxDecoration(
                        border: Border.all(color: Colors.grey),
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: Row(
                        children: [
                          const Icon(Icons.calendar_today, size: 20),
                          const SizedBox(width: 12),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
                                style: TextStyle(
                                  fontSize: 12,
                                  color: Colors.grey[600],
                                ),
                              ),
                              const SizedBox(height: 4),
                              Text(
                                startDate == null
                                    ? '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'
                                    : DateFormat(
                                        'dd/MM/yyyy',
                                      ).format(startDate!),
                                style: const TextStyle(fontSize: 16),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
                Container(
                  margin: const EdgeInsets.only(bottom: 24),
                  child: InkWell(
                    onTap: () async {
                      final picked = await showDatePicker(
                        context: context,
                        initialDate: startDate ?? DateTime.now(),
                        firstDate: DateTime(2020),
                        lastDate: DateTime(2100),
                      );
                      if (picked != null && mounted) {
                        setState(() => endDate = picked);
                      }
                    },
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                        vertical: 16,
                        horizontal: 12,
                      ),
                      decoration: BoxDecoration(
                        border: Border.all(color: Colors.grey),
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: Row(
                        children: [
                          const Icon(Icons.calendar_today, size: 20),
                          const SizedBox(width: 12),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
                                style: TextStyle(
                                  fontSize: 12,
                                  color: Colors.grey[600],
                                ),
                              ),
                              const SizedBox(height: 4),
                              Text(
                                endDate == null
                                    ? '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'
                                    : DateFormat('dd/MM/yyyy').format(endDate!),
                                style: const TextStyle(fontSize: 16),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
                _buildNumberField(
                  label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏ß',
                  controller: shirtCtrl,
                  onDecrease: () => _updateNumberField(shirtCtrl, -1),
                  onIncrease: () => _updateNumberField(shirtCtrl, 1),
                ),
                _buildNumberField(
                  label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏Ç‡∏≤‡∏ß',
                  controller: pantsCtrl,
                  onDecrease: () => _updateNumberField(pantsCtrl, -1),
                  onIncrease: () => _updateNumberField(pantsCtrl, 1),
                ),
                _buildNumberField(
                  label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏∑‡πà‡∏≠',
                  controller: matCtrl,
                  onDecrease: () => _updateNumberField(matCtrl, -1),
                  onIncrease: () => _updateNumberField(matCtrl, 1),
                ),
                _buildNumberField(
                  label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏≠‡∏ô',
                  controller: pillowCtrl,
                  onDecrease: () => _updateNumberField(pillowCtrl, -1),
                  onIncrease: () => _updateNumberField(pillowCtrl, 1),
                ),
                _buildNumberField(
                  label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡πâ‡∏≤‡∏´‡πà‡∏°',
                  controller: blanketCtrl,
                  onDecrease: () => _updateNumberField(blanketCtrl, -1),
                  onIncrease: () => _updateNumberField(blanketCtrl, 1),
                ),
                // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                const SizedBox(height: 8),
                TextFormField(
                  controller: locationCtrl,
                  decoration: const InputDecoration(
                    labelText: '‡∏´‡πâ‡∏≠‡∏á/‡∏®‡∏≤‡∏•‡∏≤/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å',
                    border: OutlineInputBorder(),
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Checkbox(
                      value: withChildren,
                      onChanged: (v) =>
                          setState(() => withChildren = v ?? false),
                    ),
                    const Text('‡∏°‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡πá‡∏Å'),
                  ],
                ),
                if (withChildren) ...[
                  const SizedBox(height: 8),
                  _buildNumberField(
                    label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡πá‡∏Å',
                    controller: childrenCtrl,
                    onDecrease: () =>
                        _updateNumberField(childrenCtrl, -1, min: 1, max: 9),
                    onIncrease: () =>
                        _updateNumberField(childrenCtrl, 1, min: 1, max: 9),
                  ),
                ],
                const SizedBox(height: 16),
                TextFormField(
                  controller: notesCtrl,
                  maxLines: 2,
                  decoration: const InputDecoration(
                    labelText: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
                    hintText: '‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß, ‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå ‡∏Ø‡∏•‡∏Ø',
                    border: OutlineInputBorder(),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
      actions: [
        TextButton(onPressed: _saveStayData, child: const Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')),
        TextButton(
          onPressed: () {
            if (context.mounted) {
              Navigator.of(context).pop();
            }
          },
          child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
        ),
      ],
    );
  }
}