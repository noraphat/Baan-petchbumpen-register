import 'package:flutter/material.dart';
import '../services/db_helper.dart';
import '../models/reg_data.dart';

class StatusTestWidget extends StatelessWidget {
  const StatusTestWidget({super.key});

  Future<void> _createExpiredStaysForTesting() async {
    final dbHelper = DbHelper();
    
    try {
      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      final visitors = await dbHelper.fetchAll();
      if (visitors.isEmpty) {
        print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô');
        return;
      }
      
      final visitor = visitors.first;
      final today = DateTime.now();
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Stay ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏°‡∏∑‡πà‡∏≠ 3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡πÄ‡∏°‡∏∑‡πà‡∏≠ 1 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß)
      final expiredStay1 = StayRecord.create(
        visitorId: visitor.id,
        startDate: today.subtract(const Duration(days: 3)),
        endDate: today.subtract(const Duration(days: 1)), // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß
        status: 'active', // ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô active ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        note: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô completed',
      );
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Stay ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏°‡∏∑‡πà‡∏≠ 5 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡πÄ‡∏°‡∏∑‡πà‡∏≠ 2 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß)
      final expiredStay2 = StayRecord.create(
        visitorId: visitor.id,
        startDate: today.subtract(const Duration(days: 5)),
        endDate: today.subtract(const Duration(days: 2)), // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß
        status: 'extended', // ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô extended ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        note: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô completed',
      );
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Stay ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - ‡∏≠‡∏µ‡∏Å 2 ‡∏ß‡∏±‡∏ô)
      final activeStay = StayRecord.create(
        visitorId: visitor.id,
        startDate: today,
        endDate: today.add(const Duration(days: 2)), // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        status: 'active',
        note: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏Ñ‡∏ß‡∏£‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô active',
      );
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await dbHelper.insertStay(expiredStay1);
      await dbHelper.insertStay(expiredStay2);
      await dbHelper.insertStay(activeStay);
      
      print('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Status Update ‡πÅ‡∏•‡πâ‡∏ß');
      print('üìä ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:');
      print('  - Stay ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ 1: ${visitor.first} ${visitor.last} (active ‚Üí completed)');
      print('  - Stay ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ 2: ${visitor.first} ${visitor.last} (extended ‚Üí completed)');
      print('  - Stay ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${visitor.first} ${visitor.last} (active)');
      
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö: $e');
    }
  }

  Future<void> _testStatusUpdate() async {
    final dbHelper = DbHelper();
    
    try {
      print('üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞...');
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Stay ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      final allVisitors = await dbHelper.fetchAll();
      if (allVisitors.isEmpty) {
        print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°');
        return;
      }
      
      final visitor = allVisitors.first;
      print('üìù ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:');
      final staysBeforeUpdate = await dbHelper.fetchAllStays(visitor.id);
      for (final stay in staysBeforeUpdate) {
        print('  - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${_formatDate(stay.startDate)} - ${_formatDate(stay.endDate)}');
        print('    ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${stay.status}');
        print('    ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏£‡∏¥‡∏á: ${stay.actualStatus}');
        print('    ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${stay.isExpired}');
        print('    ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ${stay.needsStatusUpdate}');
      }
      
      // ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      await dbHelper.updateExpiredStays();
      
      print('\nüìù ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:');
      final staysAfterUpdate = await dbHelper.fetchAllStays(visitor.id);
      for (final stay in staysAfterUpdate) {
        print('  - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${_formatDate(stay.startDate)} - ${_formatDate(stay.endDate)}');
        print('    ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${stay.status}');
        print('    ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏£‡∏¥‡∏á: ${stay.actualStatus}');
      }
      
      print('‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: $e');
    }
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        FloatingActionButton(
          onPressed: _createExpiredStaysForTesting,
          backgroundColor: Colors.blue,
          heroTag: "create_test_data",
          child: const Icon(Icons.add_alarm, color: Colors.white),
        ),
        const SizedBox(height: 8),
        FloatingActionButton(
          onPressed: _testStatusUpdate,
          backgroundColor: Colors.green,
          heroTag: "test_status_update",
          child: const Icon(Icons.refresh, color: Colors.white),
        ),
      ],
    );
  }
}