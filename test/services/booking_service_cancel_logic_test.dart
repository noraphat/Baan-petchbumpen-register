import 'package:flutter_test/flutter_test.dart';
import 'package:intl/intl.dart';
import 'package:flutter_petchbumpen_register/services/booking_service.dart';
import 'package:flutter_petchbumpen_register/services/db_helper.dart';

void main() {
  group('BookingService.cancelBooking() - Date Logic Tests', () {
    late BookingService bookingService;
    late DbHelper dbHelper;

    setUp(() async {
      dbHelper = DbHelper();
      bookingService = BookingService();
      
      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° database ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      final db = await dbHelper.db;
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await db.insert('rooms', {
        'id': 1,
        'name': '‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        'size': 'M',
        'capacity': 2,
        'status': 'available',
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°
      await db.insert('regs', {
        'id': 'test_visitor',
        'first': '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        'last': '‡∏£‡∏∞‡∏ö‡∏ö',
        'phone': '0801234567',
        'created_at': DateTime.now().toIso8601String(),
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á stays
      await db.insert('stays', {
        'visitor_id': 'test_visitor',
        'start_date': '2025-08-03',
        'end_date': '2025-08-05',
        'status': 'active',
        'created_at': DateTime.now().toIso8601String(),
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á reg_additional_info
      final visitId = 'test_visitor_${DateTime.now().millisecondsSinceEpoch}';
      await db.insert('reg_additional_info', {
        'visitId': visitId,
        'regId': 'test_visitor',
        'startDate': '2025-08-03',
        'endDate': '2025-08-05',
      });
    });

    tearDown(() async {
      final db = await dbHelper.db;
      await db.delete('room_bookings');
      await db.delete('rooms');
      await db.delete('regs');
      await db.delete('stays');
      await db.delete('reg_additional_info');
      // Cleanup database connections
    });

    // Helper method to create booking with specific check-in date
    Future<int> _createTestBooking(String checkInDate) async {
      final db = await dbHelper.db;
      final bookingId = await db.insert('room_bookings', {
        'room_id': 1,
        'visitor_id': 'test_visitor',
        'check_in_date': checkInDate,
        'check_out_date': '2025-08-05',
        'status': 'active',
        'created_at': DateTime.now().toIso8601String(),
      });
      return bookingId;
    }

    test('‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å (04/08 = 04/08) ‚Üí ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', () async {
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô 04/08/2025
      final checkInDate = '2025-08-04';
      final bookingId = await _createTestBooking(checkInDate);

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å)
      final result = await bookingService.cancelBooking(
        bookingId: bookingId,
        visitorId: 'test_visitor',
      );

      // ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ ‡∏´‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞ pass ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 04/08/2025
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ mock DateTime.now()
      print('üìÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å');
      print('   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å: $checkInDate');
      print('   ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: $result');
    });

    test('‚ùå ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ > ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å (05/08 > 04/08) ‚Üí ‡∏´‡πâ‡∏≤‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', () async {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô
      final yesterday = DateTime.now().subtract(Duration(days: 1));
      final checkInDate = DateFormat('yyyy-MM-dd').format(yesterday);
      final bookingId = await _createTestBooking(checkInDate);

      final result = await bookingService.cancelBooking(
        bookingId: bookingId,
        visitorId: 'test_visitor',
      );

      // ‡∏Ñ‡∏ß‡∏£‡∏´‡πâ‡∏≤‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
      expect(result, isFalse);
      print('üìÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ > ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å');
      print('   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å: $checkInDate');
      print('   ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: $result (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô false)');
    });

    test('‚ùå ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ < ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å (03/08 < 04/08) ‚Üí ‡∏´‡πâ‡∏≤‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', () async {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
      final tomorrow = DateTime.now().add(Duration(days: 1));
      final checkInDate = DateFormat('yyyy-MM-dd').format(tomorrow);
      final bookingId = await _createTestBooking(checkInDate);

      final result = await bookingService.cancelBooking(
        bookingId: bookingId,
        visitorId: 'test_visitor',
      );

      // ‡∏Ñ‡∏ß‡∏£‡∏´‡πâ‡∏≤‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
      expect(result, isFalse);
      print('üìÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ < ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å');
      print('   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å: $checkInDate');
      print('   ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: $result (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô false)');
    });

    test('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á getBookingById()', () async {
      final checkInDate = '2025-08-04';
      final bookingId = await _createTestBooking(checkInDate);

      final booking = await bookingService.getBookingById(bookingId);

      expect(booking, isNotNull);
      expect(booking!['id'], equals(bookingId));
      expect(booking['check_in_date'], equals(checkInDate));
      expect(booking['visitor_id'], equals('test_visitor'));
      print('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤: $booking');
    });

    test('‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á', () async {
      final result = await bookingService.cancelBooking(
        bookingId: 999999, // ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        visitorId: 'test_visitor',
      );

      expect(result, isFalse);
      print('üìÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: $result (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô false)');
    });

    test('üõ† ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô cancelled', () async {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      final today = DateTime.now();
      final checkInDate = DateFormat('yyyy-MM-dd').format(today);
      final bookingId = await _createTestBooking(checkInDate);

      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      final result = await bookingService.cancelBooking(
        bookingId: bookingId,
        visitorId: 'test_visitor',
      );

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô cancelled
      final booking = await bookingService.getBookingById(bookingId);
      
      if (result == true) {
        expect(booking!['status'], equals('cancelled'));
        print('‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô cancelled ‡πÅ‡∏•‡πâ‡∏ß');
      } else {
        print('‚ÑπÔ∏è ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡πÑ‡∏ß‡πâ');
      }
    });

    group('üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Debug Log Messages', () {
      test('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log messages ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå', () async {
        print('\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á debug messages:');
        
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ > ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å
        final yesterday = DateTime.now().subtract(Duration(days: 1));
        final checkInDatePast = DateFormat('yyyy-MM-dd').format(yesterday);
        final bookingIdPast = await _createTestBooking(checkInDatePast);
        
        await bookingService.cancelBooking(
          bookingId: bookingIdPast,
          visitorId: 'test_visitor',
        );
        print('   ‚úì ‡∏ó‡∏î‡∏™‡∏≠‡∏ö log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ > ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å" ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');

        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ < ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å
        final tomorrow = DateTime.now().add(Duration(days: 1));
        final checkInDateFuture = DateFormat('yyyy-MM-dd').format(tomorrow);
        final bookingIdFuture = await _createTestBooking(checkInDateFuture);
        
        await bookingService.cancelBooking(
          bookingId: bookingIdFuture,
          visitorId: 'test_visitor',
        );
        print('   ‚úì ‡∏ó‡∏î‡∏™‡∏≠‡∏ö log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ < ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å" ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');

        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å
        final today = DateTime.now();
        final checkInDateToday = DateFormat('yyyy-MM-dd').format(today);
        final bookingIdToday = await _createTestBooking(checkInDateToday);
        
        await bookingService.cancelBooking(
          bookingId: bookingIdToday,
          visitorId: 'test_visitor',
        );
        print('   ‚úì ‡∏ó‡∏î‡∏™‡∏≠‡∏ö log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏±‡∏Å" ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
      });
    });
  });
}