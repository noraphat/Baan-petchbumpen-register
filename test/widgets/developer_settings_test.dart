import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_petchbumpen_register/screen/developer_settings.dart';
import 'package:flutter_petchbumpen_register/services/db_helper.dart';
import 'package:flutter_petchbumpen_register/models/reg_data.dart';
import 'package:sqflite_common_ffi/sqflite_ffi.dart';

void main() {
  late DbHelper dbHelper;

  setUpAll(() {
    // Initialize FFI
    sqfliteFfiInit();
    databaseFactory = databaseFactoryFfi;
  });

  setUp(() async {
    dbHelper = DbHelper();
    await dbHelper.clearAllData();
  });

  tearDown(() async {
    await dbHelper.clearAllData();
  });

  Widget createTestWidget() {
    return MaterialApp(
      home: const DeveloperSettingsScreen(),
      localizationsDelegates: const [
        DefaultMaterialLocalizations.delegate,
        DefaultWidgetsLocalizations.delegate,
      ],
    );
  }

  group('DeveloperSettingsScreen Widget Tests', () {
    testWidgets('should display app bar with correct title and icon', (tester) async {
      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Check app bar title
      expect(find.text('Developer Settings'), findsOneWidget);
      expect(find.byIcon(Icons.developer_mode), findsOneWidget);
    });

    testWidgets('should display header information', (tester) async {
      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Check header text
      expect(find.text('üóëÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (Soft Delete)'), findsOneWidget);
      expect(find.text('‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'), findsOneWidget);
    });

    testWidgets('should show loading indicator initially', (tester) async {
      await tester.pumpWidget(createTestWidget());
      
      // Should show loading indicator before data loads
      expect(find.byType(CircularProgressIndicator), findsOneWidget);
    });

    testWidgets('should display empty state when no deleted records', (tester) async {
      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Should show empty state
      expect(find.byIcon(Icons.delete_sweep), findsOneWidget);
      expect(find.text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö'), findsOneWidget);
      expect(find.text('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö 0 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'), findsOneWidget);
    });

    testWidgets('should display deleted records when available', (tester) async {
      // Create test deleted record
      final testRecord = RegData.manual(
        id: '1234567890123',
        first: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
        last: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        dob: '15 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2530',
        phone: '0812345678',
        addr: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
        gender: '‡∏ä‡∏≤‡∏¢',
      );
      
      // Insert and then soft delete the record
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Check record display
      expect(find.text('‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö'), findsOneWidget);
      expect(find.text('ID: ${testRecord.id}'), findsOneWidget);
      expect(find.text('‡πÇ‡∏ó‡∏£: 0812345678'), findsOneWidget);
      expect(find.text('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'), findsOneWidget);
    });

    testWidgets('should display record with ID card status', (tester) async {
      // Create test record with ID card
      final testRecord = RegData.fromIdCard(
        id: '1234567890123',
        first: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á',
        last: '‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£',
        dob: '20 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå 2535',
        addr: '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°',
        gender: '‡∏´‡∏ç‡∏¥‡∏á',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Check ID card status display
      expect(find.text('‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£‡∏Ø'), findsOneWidget);
      expect(find.text('‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£'), findsOneWidget);
    });

    testWidgets('should display record without ID card status', (tester) async {
      // Create test record without ID card
      final testRecord = RegData.manual(
        id: '0987654321098',
        first: '‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå',
        last: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£',
        dob: '10 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2540',
        phone: '0891234567',
        addr: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
        gender: '‡∏ä‡∏≤‡∏¢',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Check no ID card status display
      expect(find.text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£‡∏Ø'), findsOneWidget);
      expect(find.text('‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£'), findsOneWidget);
    });

    testWidgets('should display restore and delete buttons for each record', (tester) async {
      final testRecord = RegData.manual(
        id: '1111111111111',
        first: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        last: '‡∏õ‡∏∏‡πà‡∏°',
        dob: '1 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2500',
        phone: '0801234567',
        addr: '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ',
        gender: '‡∏≠‡∏∑‡πà‡∏ô ‡πÜ',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Check buttons are present
      expect(find.text('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô'), findsOneWidget);
      expect(find.text('‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£'), findsOneWidget);
      expect(find.byIcon(Icons.restore), findsOneWidget);
      expect(find.byIcon(Icons.delete_forever), findsOneWidget);
    });

    testWidgets('should show restore confirmation dialog when restore button tapped', (tester) async {
      final testRecord = RegData.manual(
        id: '2222222222222',
        first: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        last: '‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô',
        dob: '5 ‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏° 2525',
        phone: '0821234567',
        addr: '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï',
        gender: '‡∏´‡∏ç‡∏¥‡∏á',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Tap restore button
      await tester.tap(find.text('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô'));
      await tester.pumpAndSettle();

      // Check confirmation dialog
      expect(find.text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'), findsOneWidget);
      expect(find.text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'), findsOneWidget);
      expect(find.text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'), findsOneWidget);
      expect(find.text('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô'), findsNWidgets(2)); // One in list, one in dialog
    });

    testWidgets('should show permanent delete confirmation dialog when delete button tapped', (tester) async {
      final testRecord = RegData.manual(
        id: '3333333333333',
        first: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        last: '‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£',
        dob: '12 ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô 2530',
        phone: '0831234567',
        addr: '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô',
        gender: '‡∏ä‡∏≤‡∏¢',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Tap delete button
      await tester.tap(find.text('‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£'));
      await tester.pumpAndSettle();

      // Check confirmation dialog
      expect(find.text('‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£'), findsOneWidget);
      expect(find.text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏ß‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å!'), findsOneWidget);
      expect(find.text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'), findsOneWidget);
      expect(find.text('‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£'), findsNWidgets(2)); // One in list, one in dialog
    });

    testWidgets('should cancel restore dialog when cancel button tapped', (tester) async {
      final testRecord = RegData.manual(
        id: '4444444444444',
        first: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        last: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        dob: '30 ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2535',
        phone: '0841234567',
        addr: '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ',
        gender: '‡∏´‡∏ç‡∏¥‡∏á',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Open restore dialog
      await tester.tap(find.text('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô'));
      await tester.pumpAndSettle();

      // Tap cancel
      await tester.tap(find.text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'));
      await tester.pumpAndSettle();

      // Dialog should be closed
      expect(find.text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'), findsNothing);
    });

    testWidgets('should cancel permanent delete dialog when cancel button tapped', (tester) async {
      final testRecord = RegData.manual(
        id: '5555555555555',
        first: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        last: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏•‡∏ö',
        dob: '25 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2540',
        phone: '0851234567',
        addr: '‡∏•‡∏≥‡∏õ‡∏≤‡∏á',
        gender: '‡∏ä‡∏≤‡∏¢',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Open delete dialog
      await tester.tap(find.text('‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£'));
      await tester.pumpAndSettle();

      // Tap cancel
      await tester.tap(find.text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'));
      await tester.pumpAndSettle();

      // Dialog should be closed
      expect(find.text('‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£'), findsNothing);
    });

    testWidgets('should restore record when confirmed', (tester) async {
      final testRecord = RegData.manual(
        id: '6666666666666',
        first: '‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô',
        last: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        dob: '15 ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô 2532',
        phone: '0861234567',
        addr: '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ',
        gender: '‡∏´‡∏ç‡∏¥‡∏á',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Open restore dialog and confirm
      await tester.tap(find.text('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô'));
      await tester.pumpAndSettle();
      
      await tester.tap(find.text('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô').last); // Tap confirm button
      await tester.pumpAndSettle();

      // Should show success message
      expect(find.text('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'), findsOneWidget);
      
      // Record should no longer appear in deleted list
      expect(find.text('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'), findsNothing);
      expect(find.text('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö 0 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'), findsOneWidget);
    });

    testWidgets('should permanently delete record when confirmed', (tester) async {
      final testRecord = RegData.manual(
        id: '7777777777777',
        first: '‡∏•‡∏ö',
        last: '‡∏ñ‡∏≤‡∏ß‡∏£',
        dob: '8 ‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏° 2528',
        phone: '0871234567',
        addr: '‡∏ï‡∏£‡∏≤‡∏î',
        gender: '‡∏ä‡∏≤‡∏¢',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Open delete dialog and confirm
      await tester.tap(find.text('‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£'));
      await tester.pumpAndSettle();
      
      await tester.tap(find.text('‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£').last); // Tap confirm button
      await tester.pumpAndSettle();

      // Should show success message
      expect(find.text('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'), findsOneWidget);
      
      // Record should no longer appear in deleted list
      expect(find.text('‡∏•‡∏ö ‡∏ñ‡∏≤‡∏ß‡∏£'), findsNothing);
      expect(find.text('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö 0 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'), findsOneWidget);
    });

    testWidgets('should display multiple deleted records', (tester) async {
      // Create multiple test records
      final records = [
        RegData.manual(
          id: '1000000000001',
          first: '‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà',
          last: '‡∏´‡∏ô‡∏∂‡πà‡∏á',
          dob: '1 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2500',
          phone: '0801111111',
          addr: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û',
          gender: '‡∏ä‡∏≤‡∏¢',
        ),
        RegData.manual(
          id: '1000000000002',
          first: '‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà',
          last: '‡∏™‡∏≠‡∏á',
          dob: '2 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå 2501',
          phone: '0802222222',
          addr: '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ',
          gender: '‡∏´‡∏ç‡∏¥‡∏á',
        ),
        RegData.fromIdCard(
          id: '1000000000003',
          first: '‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà',
          last: '‡∏™‡∏≤‡∏°',
          dob: '3 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2502',
          addr: '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ',
          gender: '‡∏≠‡∏∑‡πà‡∏ô ‡πÜ',
        ),
      ];
      
      // Insert and delete all records
      for (final record in records) {
        await dbHelper.insert(record);
        await dbHelper.delete(record.id);
      }

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Check all records are displayed
      expect(find.text('‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà ‡∏´‡∏ô‡∏∂‡πà‡∏á'), findsOneWidget);
      expect(find.text('‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà ‡∏™‡∏≠‡∏á'), findsOneWidget);
      expect(find.text('‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà ‡∏™‡∏≤‡∏°'), findsOneWidget);
      expect(find.text('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'), findsOneWidget);
      
      // Check ID card status
      expect(find.text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£‡∏Ø'), findsNWidgets(2)); // First two records
      expect(find.text('‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£‡∏Ø'), findsOneWidget); // Third record
      
      // Check buttons for each record
      expect(find.text('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô'), findsNWidgets(3));
      expect(find.text('‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£'), findsNWidgets(3));
    });

    testWidgets('should scroll through long list of deleted records', (tester) async {
      // Create many test records
      final records = <RegData>[];
      for (int i = 1; i <= 20; i++) {
        final record = RegData.manual(
          id: '200000000000${i.toString().padLeft(2, '0')}',
          first: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö$i',
          last: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç$i',
          dob: '${i % 28 + 1} ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2500',
          phone: '080000${i.toString().padLeft(4, '0')}',
          addr: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà $i',
          gender: i % 3 == 0 ? '‡∏≠‡∏∑‡πà‡∏ô ‡πÜ' : (i % 2 == 0 ? '‡∏´‡∏ç‡∏¥‡∏á' : '‡∏ä‡∏≤‡∏¢'),
        );
        records.add(record);
        await dbHelper.insert(record);
        await dbHelper.delete(record.id);
      }

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Check initial records are visible
      expect(find.text('‡∏ó‡∏î‡∏™‡∏≠‡∏ö1 ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç1'), findsOneWidget);
      expect(find.text('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'), findsOneWidget);
      
      // Scroll down to see more records
      await tester.dragUntilVisible(
        find.text('‡∏ó‡∏î‡∏™‡∏≠‡∏ö20 ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç20'),
        find.byType(ListView),
        const Offset(0, -200),
      );
      
      // Check bottom record is now visible
      expect(find.text('‡∏ó‡∏î‡∏™‡∏≠‡∏ö20 ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç20'), findsOneWidget);
    });

    testWidgets('should handle empty phone number display', (tester) async {
      final testRecord = RegData.manual(
        id: '8888888888888',
        first: '‡πÑ‡∏°‡πà‡∏°‡∏µ',
        last: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£',
        dob: '20 ‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô 2520',
        phone: '', // Empty phone
        addr: '‡∏£‡∏∞‡∏¢‡∏≠‡∏á',
        gender: '‡∏´‡∏ç‡∏¥‡∏á',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Check empty phone display
      expect(find.text('‡πÇ‡∏ó‡∏£: -'), findsOneWidget);
      expect(find.text('‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'), findsOneWidget);
    });

    testWidgets('should format Thai date correctly', (tester) async {
      final testRecord = RegData.manual(
        id: '9999999999999',
        first: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        last: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
        dob: '31 ‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏° 2543',
        phone: '0891111111',
        addr: '‡∏™‡∏á‡∏Ç‡∏•‡∏≤',
        gender: '‡∏ä‡∏≤‡∏¢',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      // Wait a bit to ensure updated_at timestamp is different
      await Future.delayed(const Duration(milliseconds: 100));

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Check Thai date format is displayed (should contain Thai month names)
      final deleteTimeText = find.textContaining('‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠:');
      expect(deleteTimeText, findsOneWidget);
      
      // Find the widget and verify it contains Thai month name
      final textWidget = tester.widget<Text>(deleteTimeText);
      final dateText = textWidget.data!;
      
      // Should contain Thai month name
      final thaiMonths = [
        '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
        '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
      ];
      
      final containsThaiMonth = thaiMonths.any((month) => dateText.contains(month));
      expect(containsThaiMonth, isTrue);
    });
  });

  group('DeveloperSettingsScreen Error Handling', () {
    testWidgets('should handle database errors gracefully', (tester) async {
      // Close database to simulate error
      final db = await dbHelper.db;
      await db.close();

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Should still render without crashing
      expect(find.text('Developer Settings'), findsOneWidget);
      expect(find.text('üóëÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (Soft Delete)'), findsOneWidget);
    });
  });

  group('DeveloperSettingsScreen Accessibility', () {
    testWidgets('should be accessible with screen reader', (tester) async {
      final testRecord = RegData.manual(
        id: '0000000000001',
        first: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á',
        last: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        dob: '1 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2500',
        phone: '0800000001',
        addr: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á',
        gender: '‡∏ä‡∏≤‡∏¢',
      );
      
      await dbHelper.insert(testRecord);
      await dbHelper.delete(testRecord.id);

      await tester.pumpWidget(createTestWidget());
      await tester.pumpAndSettle();

      // Check semantic labels are available
      expect(find.byType(Card), findsOneWidget);
      expect(find.byType(TextButton), findsAtLeastNWidgets(2));
      
      // Check button semantics
      final restoreButton = find.text('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô');
      final deleteButton = find.text('‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£');
      
      expect(restoreButton, findsOneWidget);
      expect(deleteButton, findsOneWidget);
      
      // These buttons should be tappable
      expect(tester.widget<TextButton>(find.ancestor(
        of: restoreButton,
        matching: find.byType(TextButton),
      ).first).onPressed, isNotNull);
      
      expect(tester.widget<TextButton>(find.ancestor(
        of: deleteButton,
        matching: find.byType(TextButton),
      ).first).onPressed, isNotNull);
    });
  });
}